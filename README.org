* Table of Content :TOC_4:
- [[#partitions][Partitions]]
  - [[#bios][BIOS]]
  - [[#uefi][UEFI]]
- [[#packages][Packages]]
  - [[#preparation][Preparation]]
    - [[#cpu-configuration][CPU configuration]]
      - [[#x86_64][x86_64]]
      - [[#i686][i686]]
      - [[#arm][ARM]]
  - [[#cross-tools][Cross tools]]
    - [[#toybox][Toybox]]
    - [[#linux][Linux]]

* Partitions
** BIOS
Here is the way the different will be mounted and formated for a BIOS system.
| Disk      | Mount Point | Size                      | FS type |
|-----------+-------------+---------------------------+---------|
| /dev/sda1 | /boot       | 256M                      | ext4    |
| /dev/sda2 |             | 2G                        | swap    |
| /dev/sda3 | /           | Space left (at least 10G) | ext4    |
First of all, format the partitions:
#+BEGIN_SRC shell
  mkfs.ext4 /dev/sda1
  mkfs.ext4 /dev/sda3
#+END_SRC
Then, activate the swap partition:
#+BEGIN_SRC shell
  mkswap /dev/sda2
  swapon /dev/sda2
#+END_SRC
Finally, mount the partitions in the =/mnt/ylfs= directory:
#+BEGIN_SRC shell
  export YLFS=/mnt/ylfs
  mkdir -pv $YLFS
  mount /dev/sda3 $YLFS
  mkdir $YLFS/boot
  mount /dev/sda1 $YLFS/boot
#+END_SRC
** TODO UEFI
* Packages
** Preparation
Prepare the directories for the sources and patches:
#+BEGIN_SRC shell
  mkdir -v $YLFS/sources
  mkdir -v $YLFS/cross-tools
  mkdir -v $YLFS/tools
  mkdir -v $YLFS/sources/{patches,files,packages}
#+END_SRC
Link directories:
#+BEGIN_SRC shell
  ln -sv $YLFS/tools /
#+END_SRC
Create a new user for the installation of tools:
#+BEGIN_SRC shell
  groupadd ylfs
  useradd -s /bin/bash -g ylfs -m -k /dev/null ylfs
  passwd ylfs
#+END_SRC
Adapt the permissions of the build directories:
#+BEGIN_SRC shell
  chown -v  ylfs $YLFS/cross-tools
  chown -vR ylfs $YLFS/sources
  chmod -v  a+wt $YLFS/sources
  chown -v  ylfs $YLFS/tools
#+END_SRC
Login as the =ylfs= user:
#+BEGIN_SRC shell
  su - ylfs
#+END_SRC
Clear compilation C flags:
#+BEGIN_SRC shell
  unset CFLAGS
  unset CXXFLAGS
#+END_SRC
Add multicore compilation:
#+BEGIN_SRC shell
  export MAKEFLAGS="-j 4"
#+END_SRC
*** CPU configuration
**** x86_64
Set build options for 64 bit CPUs:
#+BEGIN_SRC shell
  export TARGET="x86_64-ylfs-linux-musl"
  export ARCH="x86"
  export CPU="x86-64"
#+END_SRC
**** i686 
Set build options for 32 bit CPUs:
#+BEGIN_SRC shell
  export TARGET="i686-ylfs-linux-musl"
  export ARCH="x86"
  export CPU="i686"
#+END_SRC
**** ARM
***** armv7
Set build options for armv7 CPUs:
#+BEGIN_SRC shell
  export TARGET="armv7l-ylfs-linux-musl"
  export ARCH="arm"
  export CPU="armv7-a"
#+END_SRC
***** armv6
Set build options for armv6 CPUs:
#+BEGIN_SRC shell
  export TARGET="armv6l-ylfs-linux-musl"
  export ARCH="arm"
  export CPU="armv6"
#+END_SRC
** Cross tools
*** Toybox
Source: https://landley.net/toybox/downloads/toybox-0.8.3.tar.gz
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://landley.net/toybox/downloads/toybox-0.8.3.tar.gz
  tar -xf toybox-0.8.3.tar.gz
  cd toybox-0.8.3
#+END_SRC
Build:
#+BEGIN_SRC shell
  CROSS_COMPILE=$CPU make defconfig
  make
  PREFIX=$YLFS/cross-tools make install
#+END_SRC
*** Linux
Source: https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.1.tar.xz
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.1.tar.xz
  tar -xf linux-5.8.1.tar.xz
  cd linux-5.8.1
#+END_SRC
Clean sources:
#+BEGIN_SRC shell
  make mrproper
#+END_SRC
Build headers:
#+BEGIN_SRC shell
  make headers_check
#+END_SRC
Clean:
#+BEGIN_SRC shell
  rm usr/include/Makefile
#+END_SRC
Install headers:
#+BEGIN_SRC shell
  cp -rv usr/include/* /cross-tools/${TARGET}/include
#+END_SRC
