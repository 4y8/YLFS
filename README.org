* Table of Content :TOC_4:
- [[#partitions][Partitions]]
  - [[#bios][BIOS]]
  - [[#uefi][UEFI]]
- [[#packages][Packages]]
  - [[#preparation][Preparation]]
    - [[#cpu-configuration][CPU configuration]]
      - [[#x86_64][x86_64]]
      - [[#i686][i686]]
      - [[#arm][ARM]]
  - [[#cross-tools][Cross tools]]
    - [[#binutils][Binutils]]
    - [[#kernel-headers][Kernel Headers]]
    - [[#gcc-static][GCC Static]]
    - [[#musl][Musl]]
    - [[#gcc-final][GCC Final]]
    - [[#file][File]]
  - [[#tool-chain][Tool Chain]]
    - [[#musl-1][Musl]]
      - [[#x86_64-1][x86_64]]
      - [[#i686-1][i686]]
      - [[#arm-1][arm]]
    - [[#adjust-cross-tool-chain][Adjust Cross Tool Chain]]
      - [[#modify-compiler-specs][Modify compiler specs]]
      - [[#install-specs][Install specs]]
      - [[#check-tool-chain][Check tool chain]]
      - [[#clean][Clean]]
    - [[#setup][Setup]]
    - [[#binutils-12][Binutils 1/2]]
    - [[#gcc-12][GCC 1/2]]
      - [[#fix-gcc-linker][Fix GCC linker]]
      - [[#build][Build]]
    - [[#kernel-headers-1][Kernel Headers]]
    - [[#adjust-tool-chain][Adjust Tool Chain]]
      - [[#modify-compiler-specs-1][Modify compiler specs]]
      - [[#install-specs-1][Install specs]]
      - [[#check-include][Check include]]
      - [[#check-tool-chain-1][Check tool chain]]
      - [[#clean-1][Clean]]
    - [[#libstdcxx][Libstdcxx]]
    - [[#binutils-22][Binutils 2/2]]
    - [[#gcc-22][GCC 2/2]]
      - [[#fix-gcc-linker-1][Fix GCC linker]]
      - [[#build-1][Build]]
      - [[#test-compiler][Test compiler]]
      - [[#clean-2][Clean]]
    - [[#tcl][TCL]]
    - [[#dejagnu][DejaGNU]]
    - [[#m4][M4]]
  - [[#final][Final]]
    - [[#toybox][Toybox]]

* Partitions
** BIOS
Here is the way the different will be mounted and formated for a BIOS system.
| Disk      | Mount Point | Size                      | FS type |
|-----------+-------------+---------------------------+---------|
| /dev/sda1 | /boot       | 256M                      | ext4    |
| /dev/sda2 |             | 2G                        | swap    |
| /dev/sda3 | /           | Space left (at least 10G) | ext4    |
First of all, format the partitions:
#+BEGIN_SRC shell
  mkfs.ext4 /dev/sda1
  mkfs.ext4 /dev/sda3
#+END_SRC
Then, activate the swap partition:
#+BEGIN_SRC shell
  mkswap /dev/sda2
  swapon /dev/sda2
#+END_SRC
Finally, mount the partitions in the =/mnt/ylfs= directory:
#+BEGIN_SRC shell
  export YLFS=/mnt/ylfs
  mkdir -pv ${YLFS}
  mount /dev/sda3 ${YLFS}
  mkdir ${YLFS}/boot
  mount /dev/sda1 ${YLFS}/boot
#+END_SRC
** TODO UEFI
* Packages
** Preparation
Prepare the directories for the sources and patches:
#+BEGIN_SRC shell
  mkdir -v ${YLFS}/sources
  mkdir -v ${YLFS}/cross-tools
  mkdir -v ${YLFS}/tools
  mkdir -v ${YLFS}/sources/{patches,files,packages}
#+END_SRC
Link directories:
#+BEGIN_SRC shell
  ln -sv $YLFS/cross-tools /
  ln -sv $YLFS/tools /
#+END_SRC
Create a new user for the installation of tools:
#+BEGIN_SRC shell
  groupadd ylfs
  useradd -s /bin/bash -g ylfs -m -k /dev/null ylfs
  passwd ylfs
#+END_SRC
Adapt the permissions of the build directories:
#+BEGIN_SRC shell
  chown -v  ylfs ${YLFS}/cross-tools
  chown -vR ylfs ${YLFS}/sources
  chmod -v  a+wt ${YLFS}/sources
  chown -v  ylfs ${YLFS}/tools
#+END_SRC
Login as the =ylfs= user:
#+BEGIN_SRC shell
  su - ylfs
#+END_SRC
Clear compilation C flags:
#+BEGIN_SRC shell
  unset CFLAGS
  unset CXXFLAGS
#+END_SRC
Add multicore compilation:
#+BEGIN_SRC shell
  export MAKEFLAGS="-j $(nproc)"
#+END_SRC
Add future tools to the path:
#+BEGIN_SRC shell
  PATH=/cross-tools:$PATH
#+END_SRC
*** CPU configuration
**** x86_64
Set build options for 64 bit CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="x86_64-linux-musl"
  export YLFS_ARCH="x86"
  export YLFS_CPU="x86-64"
#+END_SRC
**** i686
Set build options for 32 bit CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="i686-linux-musl"
  export YLFS_ARCH="x86"
  export YLFS_CPU="i686"
#+END_SRC
**** ARM
***** armv7
Set build options for armv7 CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="armv7l-linux-musl"
  export YLFS_ARCH="arm"
  export YLFS_CPU="armv7-a"
#+END_SRC
***** armv6
Set build options for armv6 CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="armv6l-linux-musl"
  export YLFS_ARCH="arm"
  export YLFS_CPU="armv6"
#+END_SRC
** Cross tools
*** Binutils
Source: https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.xz
  tar -xf binutils-2.35.tar.xz
  cd binutils-2.35
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure source:
#+BEGIN_SRC shell
  ../configure                                  \
     --prefix=/cross-tools                      \
     --target=${YLFS_TARGET}                    \
     --with-sysroot=/cross-tools/${YLFS_TARGET} \
     --disable-nls                              \
     --disable-multilib                         \
     --disable-werror                           \
     --enable-deterministic-archives            \
     --disable-compressed-debug-sections
#+END_SRC
Build:
#+BEGIN_SRC shell
  make
#+END_SRC
Create a symlink for =lib64= (only on x86_64):
#+BEGIN_SRC shell
  mkdir -v /tools/lib && ln -sv lib /tools/lib64
#+END_SRC
Install:
#+BEGIN_SRC shell
  make install
#+END_SRC
*** Kernel Headers
Source: https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.1.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.1.tar.xz
  tar -xf linux-5.8.1.tar.xz
  cd linux-5.8.1
#+END_SRC
Clean sources:
#+BEGIN_SRC shell
  ARCH=${YLFS_ARCH} make mrproper
#+END_SRC
Build headers:
#+BEGIN_SRC shell
  ARCH=$YLFS_ARCH make headers_check
#+END_SRC
Install and clean:
#+BEGIN_SRC shell
  ARCH=$YLFS_ARCH make headers
  rm usr/include/Makefile
  mkdir -pv /cross-tools/${YLFS_TARGET}/include
  cp -rv usr/include/* /cross-tools/${YLFS_TARGET}/include
#+END_SRC
*** GCC Static
Source: https://ftp.gnu.org/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.xz \\
Dependencies:
- https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.xz
- https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz
- https://ftp.gnu.org/gnu/gmp/gmp-6.2.0.tar.xz
Download sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/gmp/gmp-6.2.0.tar.xz
  wget https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz
  wget https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.xz
  wget https://ftp.gnu.org/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.xz
#+END_SRC
Extract GCC:
#+BEGIN_SRC shell
  tar -xf gcc-10.2.0.tar.xz
  cd gcc-10.2.0
#+END_SRC
Extract dependencies:
#+BEGIN_SRC shell
  tar -xf ../mpfr-4.1.0.tar.xz
  mv -v mpfr-4.1.0 mpfr
  tar -xf ../gmp-6.2.0.tar.xz
  mv -v gmp-6.2.0 gmp
  tar -xf ../mpc-1.1.0.tar.gz
  mv -v mpc-1.1.0 mpc
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  CFLAGS='-g0 -O0'   \
  CXXFLAGS='-g0 -O0' \
  ../configure                                            \
        --prefix=${YLFS}/cross-tools                      \
        --build=${MACHTYPE}                               \
        --host=${MACHTYPE}                                \
        --target=${YLFS_TARGET}                           \
        --with-sysroot=${YLFS}/cross-tools/${YLFS_TARGET} \
        --disable-nls                                     \
        --with-newlib                                     \
        --disable-libitm                                  \
        --disable-libvtv                                  \
        --disable-libssp                                  \
        --disable-shared                                  \
        --disable-libgomp                                 \
        --without-headers                                 \
        --disable-threads                                 \
        --disable-multilib                                \
        --disable-libatomic                               \
        --disable-libstdcxx                               \
        --enable-languages=c                              \
        --disable-libquadmath                             \
        --disable-libsanitizer                            \
        --with-arch=${YLFS_CPU}                           \
        --disable-decimal-float                           \
        --enable-clocale=generic
#+END_SRC
Build and install the only the minimum needed:
#+BEGIN_SRC shell
  make all-gcc all-target-libgcc
  make install-gcc install-target-libgcc
#+END_SRC
*** Musl
Source: https://www.musl-libc.org/releases/musl-1.2.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.musl-libc.org/releases/musl-1.2.1.tar.gz
  tar -xf musl-1.2.1.tar.gz
  cd musl-1.2.1
#+END_SRC
Configure cross build:
#+BEGIN_SRC shell
  ./configure \
    CROSS_COMPILE=${YLFS_TARGET}- \
    --prefix=/ \
    --target=${YLFS_TARGET}
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && DESTDIR=/cross-tools make install
#+END_SRC
Create the missing directory and link the library:
#+BEGIN_SRC shell
  mkdir -v /cross-tools/usr
  ln -sv ../include /cross-tools/usr/include
#+END_SRC
*** GCC Final
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Use =lib= instead of =lib64=, (for x86_64 only):
#+BEGIN_SRC shell
  sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
  sed -i 's/lib64/lib/'       gcc/config/i386/linux64.h
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  AR=ar LDFLAGS="-Wl,-rpath,/cross-tools/lib" \
  ../configure \
      --prefix=/cross-tools \
      --build=${YLFS_HOST} \
      --host=${YLFS_HOST} \
      --target=${YLFS_TARGET} \
      --disable-multilib \
      --with-sysroot=/cross-tools \
      --disable-nls \
      --enable-shared \
      --enable-languages=c,c++ \
      --enable-threads=posix \
      --enable-clocale=generic \
      --enable-libstdcxx-time \
      --enable-fully-dynamic-string \
      --disable-symvers \
      --disable-libsanitizer \
      --disable-lto-plugin \
      --disable-libssp
#+END_SRC
Build:
#+BEGIN_SRC shell
  make AS_FOR_TARGET="${YLFS_TARGET}-as" \
  LD_FOR_TARGET="${YLFS_TARGET}-ld"
#+END_SRC
Install
#+BEGIN_SRC shell
  make install
#+END_SRC
*** File
Source: ftp://ftp.astron.com/pub/file/file-5.39.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget ftp://ftp.astron.com/pub/file/file-5.39.tar.gz
  tar -xf file-5.39.tar.gz
  cd file-5.39
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/cross-tools --disable-libseccomp
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
** Tool Chain
*** Musl
Configure sources:
#+BEGIN_SRC shell
  ./configure \
    CROSS_COMPILE=${YLFS_TARGET}- \
    --prefix=/ \
    --target=${YLFS_TARGET}
#+END_SRC
Build and install: 
#+BEGIN_SRC shell
  make && make DESTDIR=/tools install
#+END_SRC
Verify symlinks:
**** x86_64
#+BEGIN_SRC shell
  rm -v  /tools/lib/ld-musl-x86_64.so.1
  ln -sv libc.so /tools/lib/ld-musl-x86_64.so.1
#+END_SRC
**** i686
#+BEGIN_SRC shell
  rm -v  /tools/lib/ld-musl-i686.so.1
  ln -sv libc.so /tools/lib/ld-musl-i686.so.1
#+END_SRC
**** arm
#+BEGIN_SRC shell
  rm -v  /tools/lib/ld-musl-arm.so.1
  ln -sv libc.so /tools/lib/ld-musl-arm.so.1
#+END_SRC
*** Adjust Cross Tool Chain
Needed when host's libc isn't musl.\\
**** Modify compiler specs
Dump current cross-gcc specs:
#+BEGIN_SRC shell
  export SPECFILE=`dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
  ${YLFS_TARGET}-gcc -dumpspecs > specs
#+END_SRC
Modify dumped specs file:
***** x86_64
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/tools\/lib\/ld-musl-x86_64.so.1/g' specs
  grep "/tools/lib/ld-musl-x86_64.so.1" specs  --color=auto
#+END_SRC
***** i686
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-i386.so.1/\/tools\/lib\/ld-musl-i386.so.1/g' specs
  grep "/tools/lib/ld-musl-i386.so.1" specs  --color=auto
#+END_SRC
***** arm
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-arm/\/tools\/lib\/ld-musl-arm/g' specs
  grep "/tools/lib/ld-musl-arm" specs  --color=auto
#+END_SRC
**** Install specs
Install the modified specs:
#+BEGIN_SRC shell
  mv -v specs $SPECFILE
  unset SPECFILE
#+END_SRC
**** Check tool chain
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  ${YLFS_TARGET}-gcc test.c
  ${YLFS_TARGET}-readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]=.
**** Clean
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c 
#+END_SRC
*** Setup
Export variables to use cross-tools:
#+BEGIN_SRC shell
  export CC="${YLFS_TARGET}-gcc"
  export CXX="${YLFS_TARGET}-g++"
  export AR="${YLFS_TARGET}-ar"
  export AS="${YLFS_TARGET}-as"
  export RANLIB="${YLFS_TARGET}-ranlib"
  export LD="${YLFS_TARGET}-ld"
  export STRIP="${YLFS_TARGET}-strip"
#+END_SRC
*** Binutils 1/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../configure                   \
      --prefix=/tools            \
      --with-sysroot=${YLFS}     \
      --with-lib-path=/tools/lib \
      --build=${YLFS_HOST}       \
      --host=${YLFS_TARGET}      \
      --target=${YLFS_TARGET}    \
      --disable-nls              \
      --disable-werror
#+END_SRC
Build:
#+BEGIN_SRC shell
  make
#+END_SRC
Create a symlink for =lib64= (only on x86_64):
#+BEGIN_SRC shell
  ln -sv lib /tools/lib64
#+END_SRC
Install:
#+BEGIN_SRC shell
  make install
#+END_SRC
*** GCC 1/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
**** Fix GCC linker
Fix GCC's default dynamic linker to use the one compiled in =/tools=.
***** x86_64 / i686
#+BEGIN_SRC shell
  for file in gcc/config/{linux,i386/linux{,64}}.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
Use =lib= instead of =lib64=, (for x86_64 only):
#+BEGIN_SRC shell
  sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
  sed -i 's/lib64/lib/'       gcc/config/i386/linux64.h
#+END_SRC
***** arm
#+BEGIN_SRC shell
  for file in gcc/config/arm/linux-eabi.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
**** Build
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure:
#+BEGIN_SRC shell
  CFLAGS='-g0 -O0'   \
  CXXFLAGS='-g0 -O0' \
  ../configure                                       \
      --target=${YLFS_TARGET}                        \
      --build=${YLFS_HOST}                           \
      --host=${YLFS_TARGET}                          \
      --prefix=/tools                                \
      --with-sysroot=$YLFS                           \
      --with-newlib                                  \
      --without-headers                              \
      --with-local-prefix=/tools                     \
      --with-native-system-header-dir=/tools/include \
      --disable-nls                                  \
      --disable-shared                               \
      --disable-multilib                             \
      --disable-threads                              \
      --disable-libatomic                            \
      --disable-libgomp                              \
      --disable-libquadmath                          \
      --disable-libssp                               \
      --disable-libvtv                               \
      --disable-libstdcxx                            \
      --enable-languages=c,c++                       \
      --disable-libstdcxx-pch                        \
      --disable-symvers                              \
      --disable-libitm                               \
      --disable-libsanitizer 
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Kernel Headers
Clean sources:
#+BEGIN_SRC shell
  ARCH=${YLFS_ARCH} make mrproper
#+END_SRC
Build headers:
#+BEGIN_SRC shell
  ARCH=${YLFS_ARCH} make headers
#+END_SRC
Clean:
#+BEGIN_SRC shell
  find usr/include \( -name .install -o -name ..install.cmd \) -delete
  rm usr/include/Makefile
#+END_SRC
Install headers
#+BEGIN_SRC shell
  cp -rv usr/include/* /tools/include
#+END_SRC
*** Adjust Tool Chain
**** Modify compiler specs
Dump current cross-gcc specs:
#+BEGIN_SRC shell
  export SPECFILE=`dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
  ${YLFS_TARGET}-gcc -dumpspecs > specs
#+END_SRC
Modify dumped specs file:
***** x86_64
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/tools\/lib\/ld-musl-x86_64.so.1/g' specs
  grep "/tools/lib/ld-musl-x86_64.so.1" specs  --color=auto
#+END_SRC
***** i686
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-i386.so.1/\/tools\/lib\/ld-musl-i386.so.1/g' specs
  grep "/tools/lib/ld-musl-i386.so.1" specs  --color=auto
#+END_SRC
***** arm
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-arm/\/tools\/lib\/ld-musl-arm/g' specs
  grep "/tools/lib/ld-musl-arm" specs  --color=auto
#+END_SRC
**** Install specs
Install the modified specs:
#+BEGIN_SRC shell
  mv -vf specs $SPECFILE
  unset SPECFILE
#+END_SRC
**** Check include
#+BEGIN_SRC shell
  GCC_INCLUDEDIR=`dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name)`/include &&
  find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
  rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &&
  unset GCC_INCLUDEDIR
#+END_SRC
**** Check tool chain
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  ${YLFS_TARGET}-gcc test.c
  ${YLFS_TARGET}-readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]=.
**** Clean
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c 
#+END_SRC
*** Libstdcxx
Has to be done in the =gcc= source directory.\\
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../libstdc++-v3/configure           \
      --target=${YLFS_TARGET}         \
      --build=${YLFS_HOST}            \
      --host=${YLFS_TARGET}           \
      --prefix=/tools                 \
      --disable-multilib              \
      --disable-nls                   \
      --disable-libstdcxx-threads     \
      --disable-libstdcxx-pch         \
      --with-gxx-include-dir=/tools/${YLFS_TARGET}/include/c++/9.1.0
#+END_SRC
Build and install:
#+BEGIN_SRC shell
make && make install
#+END_SRC
*** Binutils 2/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../configure                   \
      --prefix=/tools            \
      --with-sysroot=${YLFS}     \
      --with-lib-path=/tools/lib \
      --build=${YLFS_HOST}       \
      --host=${YLFS_TARGET}      \
      --target=${YLFS_TARGET}    \
      --disable-nls              \
      --disable-werror
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Build and install the linker to the toolchain in order to adjust it later:
#+BEGIN_SRC shell
  make -C ld clean
  make -C ld LIB_PATH=/usr/lib:/lib
  cp -v ld/ld-new /tools/bin
#+END_SRC
*** GCC 2/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create a full version of the insternal header as what the normal gcc build
system would do:
#+BEGIN_SRC shell
  cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
    $(dirname $($YLFS_TARGET-gcc -print-libgcc-file-name))/include-fixed/limits.h
#+END_SRC
**** Fix GCC linker
Fix GCC's default dynamic linker to use the one compiled in =/tools=.
***** x86_64 / i686
#+BEGIN_SRC shell
  for file in gcc/config/{linux,i386/linux{,64}}.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
Use =lib= instead of =lib64=, (for x86_64 only):
#+BEGIN_SRC shell
  sed -i '/m64=/s/lib64/lib/' gcc/config/i386/t-linux64
  sed -i 's/lib64/lib/'       gcc/config/i386/linux64.h
#+END_SRC
***** arm
#+BEGIN_SRC shell
  for file in gcc/config/arm/linux-eabi.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
**** Build
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure:
#+BEGIN_SRC shell
  CFLAGS='-g0 -O0'   \
  CXXFLAGS='-g0 -O0' \
  ../configure                                       \
      --target=${YLFS_TARGET}                        \
      --build=${YLFS_HOST}                           \
      --host=${YLFS_TARGET}                          \
      --prefix=/tools                                \
      --with-local-prefix=/tools                     \
      --with-native-system-header-dir=/tools/include \
      --disable-multilib                             \
      --disable-libgomp                              \
      --disable-libquadmath                          \
      --disable-libssp                               \
      --disable-libvtv                               \
      --disable-libstdcxx                            \
      --enable-languages=c,c++                       \
      --disable-libstdcxx-pch                        \
      --disable-symvers                              \
      --disable-libitm                               \
      --disable-libsanitizer 
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin make && make install
#+END_SRC
Link =cc= to =gcc= for better compatibility:
#+BEGIN_SRC shell
  ln -sv gcc /tools/bin/cc
#+END_SRC
**** Test compiler
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  cc test.c
  readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]=.
**** Clean
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c 
#+END_SRC
*** TCL
Source: https://downloads.sourceforge.net/tcl/tcl8.6.10-src.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://downloads.sourceforge.net/tcl/tcl8.6.10-src.tar.gz
  tar -xf tcl8.6.10-src.tar.gz
  cd tcl8.6.10-src/unix
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ac_cv_func_strtod=yes \
  tcl_cv_strtod_buggy=1 \
  ./configure --build=${YLFS_HOST}  \
              --host=${YLFS_TARGET} \
              --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Install headers:
#+BEGIN_SRC shell
  chmod -v u+w /tools/lib/libtcl8.6.so
  make install-private-headers
  ln -sv tclsh8.6 /tools/bin/tcls
#+END_SRC
*** DejaGNU
Source: http://ftp.gnu.org/gnu/dejagnu/dejagnu-1.6.2.tar.gz \\
#+BEGIN_SRC shell
  wget http://ftp.gnu.org/gnu/dejagnu/dejagnu-1.6.2.tar.gz
  tar -xf dejagnu-1.6.2.tar.gz
  cd dejagnu-1.6.2
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --build=${YLFS_HOST}  \
              --host=${YLFS_TARGET} \
              --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** M4
Source: http://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz \\
#+BEGIN_SRC shell
  wget http://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz
  tar -xf m4-1.4.18.tar.xz
  cd m4-1.4.18
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --build=${YLFS_HOST}  \
              --host=${YLFS_TARGET} \
              --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
** Final
*** Toybox
Source: https://landley.net/toybox/downloads/toybox-0.8.3.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://landley.net/toybox/downloads/toybox-0.8.3.tar.gz
  tar -xf toybox-0.8.3.tar.gz
  cd toybox-0.8.3
#+END_SRC
Configure, build and install.
#+BEGIN_SRC shell
  CROSS_COMPILE=$YLFS_CPU make defconfig
  make
  PREFIX=${YLFS}/cross-tools make install
#+END_SRC
