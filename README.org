* Table of Content :TOC_4:
- [[#partitions][Partitions]]
  - [[#bios][BIOS]]
  - [[#uefi][UEFI]]
- [[#preparation][Preparation]]
    - [[#cpu-configuration][CPU configuration]]
      - [[#x86_64][x86_64]]
      - [[#i686][i686]]
      - [[#arm][ARM]]
- [[#cross-tools][Cross tools]]
  - [[#packages][Packages]]
    - [[#binutils][Binutils]]
    - [[#kernel-headers][Kernel Headers]]
    - [[#gcc-static][GCC Static]]
    - [[#musl][Musl]]
    - [[#gcc-final][GCC Final]]
    - [[#file][File]]
- [[#tool-chain][Tool Chain]]
  - [[#packages-1][Packages]]
    - [[#musl-1][Musl]]
      - [[#x86_64-1][x86_64]]
      - [[#i686-1][i686]]
      - [[#arm-1][arm]]
    - [[#adjust-cross-tool-chain][Adjust Cross Tool Chain]]
      - [[#modify-compiler-specs][Modify compiler specs]]
      - [[#install-specs][Install specs]]
      - [[#check-tool-chain][Check tool chain]]
      - [[#clean][Clean]]
    - [[#setup][Setup]]
    - [[#binutils-12][Binutils 1/2]]
    - [[#gcc-12][GCC 1/2]]
      - [[#fix-gcc-linker][Fix GCC linker]]
      - [[#build][Build]]
    - [[#kernel-headers-1][Kernel Headers]]
    - [[#adjust-tool-chain][Adjust Tool Chain]]
      - [[#modify-compiler-specs-1][Modify compiler specs]]
      - [[#install-specs-1][Install specs]]
      - [[#check-include][Check include]]
      - [[#check-tool-chain-1][Check tool chain]]
      - [[#clean-1][Clean]]
    - [[#libstdcxx][Libstdcxx]]
    - [[#binutils-22][Binutils 2/2]]
    - [[#gcc-22][GCC 2/2]]
      - [[#fix-gcc-linker-1][Fix GCC linker]]
      - [[#build-1][Build]]
      - [[#test-compiler][Test compiler]]
      - [[#clean-2][Clean]]
    - [[#tcl][TCL]]
    - [[#expect][Expect]]
    - [[#dejagnu][DejaGNU]]
    - [[#m4][M4]]
    - [[#ncurses][Ncurses]]
    - [[#bash][Bash]]
    - [[#bison][Bison]]
    - [[#bzip2][Bzip2]]
    - [[#coreutils][Coreutils]]
    - [[#diffutils][Diffutils]]
    - [[#file-1][File]]
    - [[#findutils][Findutils]]
    - [[#awk-mawk][Awk (mawk)]]
    - [[#gettext-gettext-tiny][Gettext (gettext-tiny)]]
    - [[#grep][Grep]]
    - [[#gzip][Gzip]]
    - [[#make][Make]]
    - [[#patch][Patch]]
    - [[#perl][Perl]]
    - [[#sed][Sed]]
    - [[#tar][Tar]]
    - [[#xz][Xz]]
    - [[#lzip][Lzip]]
- [[#final-system][Final system]]
  - [[#preparation-1][Preparation]]
    - [[#clean-3][Clean]]
    - [[#ownership][Ownership]]
    - [[#vkfs][VKFS]]
    - [[#chroot][Chroot]]
    - [[#directories][Directories]]
    - [[#files][Files]]
  - [[#packages-2][Packages]]
    - [[#kernel-headers-2][Kernel Headers]]
    - [[#man-pages][Man pages]]
    - [[#musl-2][Musl]]
    - [[#system-time][System time]]
    - [[#adjust-toolchain][Adjust toolchain]]
      - [[#cpu-configuration-1][CPU configuration]]
      - [[#adjust-linker-and-toolchain][Adjust linker and toolchain]]
      - [[#other-tests][Other tests]]
    - [[#argp][Argp]]
    - [[#zlib][Zlib]]
    - [[#file-2][File]]
    - [[#readline][Readline]]
    - [[#m4-1][M4]]
    - [[#binutils-1][Binutils]]
    - [[#gmp][GMP]]
    - [[#mpfr][MPFR]]
    - [[#mpc][MPC]]
    - [[#shadow][Shadow]]
    - [[#gcc][GCC]]
      - [[#setup-truple][Setup TRUPLE]]
      - [[#continue-building][Continue building]]
      - [[#other-tests-1][Other tests]]
    - [[#bzip2-1][Bzip2]]
    - [[#pkgconfig][Pkgconfig]]
    - [[#ncurses-1][Ncurses]]
    - [[#attr][Attr]]
    - [[#acl][ACL]]
    - [[#libcap][Libcap]]
    - [[#psmisc][PSMisc]]
    - [[#iana-etc][Iana-etc]]
    - [[#bison-1][Bison]]
    - [[#flex][Flex]]
    - [[#bash-1][Bash]]
    - [[#libtool][Libtool]]
    - [[#gdbm][Gdbm]]
    - [[#gperf][Gperf]]
    - [[#expat][Expat]]
    - [[#inetutils][Inetutils]]
    - [[#perl-1][Perl]]
    - [[#xmlparser][XML::Parser]]
    - [[#autoconf][Autoconf]]
    - [[#automake][Automake]]
    - [[#musl-fts][Musl FTS]]
    - [[#musl-obstack][Musl Obstack]]
    - [[#xz-1][Xz]]
    - [[#kmod][Kmod]]
    - [[#gettext][Gettext]]
    - [[#libressl][LibreSSL]]
    - [[#python][Python]]
    - [[#ninja-samurai][Ninja (Samurai)]]
    - [[#meson][Meson]]
    - [[#procps][Procps]]
    - [[#busybox][Busybox]]
    - [[#check][Check]]
    - [[#grub][Grub]]
      - [[#bios-1][BIOS]]
      - [[#uefi-1][UEFI]]
      - [[#build-2][Build]]
    - [[#gzip-1][Gzip]]
    - [[#make-1][Make]]
    - [[#s6][S6]]

* Partitions
** BIOS
Here is the way the different will be mounted and formated for a BIOS system.
| Disk      | Mount Point | Size                      | FS type |
|-----------+-------------+---------------------------+---------|
| /dev/sda1 | /boot       | 256M                      | ext4    |
| /dev/sda2 |             | 2G                        | swap    |
| /dev/sda3 | /           | Space left (at least 10G) | ext4    |
First of all, format the partitions:
#+BEGIN_SRC shell
  mkfs.ext4 /dev/sda1
  mkfs.ext4 /dev/sda3
#+END_SRC
Then, activate the swap partition:
#+BEGIN_SRC shell
  mkswap /dev/sda2
  swapon /dev/sda2
#+END_SRC
Finally, mount the partitions in the =/mnt/ylfs= directory:
#+BEGIN_SRC shell
  export YLFS=/mnt/ylfs
  mkdir -pv "$YLFS"
  mount /dev/sda3 "$YLFS"
  mkdir "{$YLFS}/boot"
  mount /dev/sda1 "${YLFS}/boot"
#+END_SRC
** TODO UEFI
* Preparation
Prepare the directories for the sources and patches:
#+BEGIN_SRC shell
  mkdir -v ${YLFS}/sources
  mkdir -v ${YLFS}/cross-tools
  mkdir -v ${YLFS}/tools
  mkdir -v ${YLFS}/sources/{patches,files,packages}
#+END_SRC
Link directories:
#+BEGIN_SRC shell
  ln -sv "${YLFS}/cross-tools" /
  ln -sv "${YLFS}/tools" /
#+END_SRC
Create a new user for the installation of tools:
#+BEGIN_SRC shell
  groupadd ylfs
  useradd -s /bin/bash -g ylfs -m -k /dev/null ylfs
  passwd ylfs
#+END_SRC
Adapt the permissions of the build directories:
#+BEGIN_SRC shell
  chown -v  ylfs "{YLFS}/cross-tools"
  chown -vR ylfs "${YLFS}/sources"
  chmod -v  a+wt "{YLFS}/sources"
  chown -v  ylfs "${YLFS}/tools"
#+END_SRC
Login as the =ylfs= user:
#+BEGIN_SRC shell
  su - ylfs
  export YLFS=/mnt/ylfs
#+END_SRC
Clear compilation C flags:
#+BEGIN_SRC shell
  unset CFLAGS
  unset CXXFLAGS
#+END_SRC
Add multicore compilation:
#+BEGIN_SRC shell
  export MAKEFLAGS="-j $(nproc)"
#+END_SRC
Add future tools to the path:
#+BEGIN_SRC shell
  PATH=/cross-tools/bin:/tools/bin:$PATH
#+END_SRC
*** CPU configuration
**** x86_64
Set build options for 64 bit CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="x86_64-ylfs-linux-musl"
  export YLFS_ARCH="x86"
  export YLFS_CPU="x86-64"
#+END_SRC
**** i686
Set build options for 32 bit CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="i686-ylfs-linux-musl"
  export YLFS_ARCH="x86"
  export YLFS_CPU="i686"
#+END_SRC
**** ARM
***** armv7
Set build options for armv7 CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="armv7l-ylfs-linux-musl"
  export YLFS_ARCH="arm"
  export YLFS_CPU="armv7-a"
#+END_SRC
***** armv6
Set build options for armv6 CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="armv6l-ylfs-linux-musl"
  export YLFS_ARCH="arm"
  export YLFS_CPU="armv6"
#+END_SRC
* Cross tools
** Packages
*** Binutils
Source: https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/binutils/binutils-2.35.tar.xz
  tar -xf binutils-2.35.tar.xz
  cd binutils-2.35
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure source:
#+BEGIN_SRC shell
  ../configure                                  \
     --prefix=/cross-tools                      \
     --target=${YLFS_TARGET}                    \
     --with-sysroot=/cross-tools/${YLFS_TARGET} \
     --disable-nls                              \
     --disable-multilib                         \
     --disable-werror                           \
     --enable-deterministic-archives            \
     --disable-compressed-debug-sections
#+END_SRC
Build:
#+BEGIN_SRC shell
  make
#+END_SRC
Create a symlink for =lib64= (only on x86_64):
#+BEGIN_SRC shell
  mkdir -v /tools/lib && ln -sv lib /tools/lib64
#+END_SRC
Install:
#+BEGIN_SRC shell
  make install
#+END_SRC
*** Kernel Headers
Source: https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.1.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.8.1.tar.xz
  tar -xf linux-5.8.1.tar.xz
  cd linux-5.8.1
#+END_SRC
Clean sources:
#+BEGIN_SRC shell
  ARCH=${YLFS_ARCH} make mrproper
#+END_SRC
Build headers:
#+BEGIN_SRC shell
  ARCH=${YLFS_ARCH} make headers_check
#+END_SRC
Install and clean:
#+BEGIN_SRC shell
  ARCH=${YLFS_ARCH} make headers
  rm usr/include/Makefile
  mkdir -pv /cross-tools/${YLFS_TARGET}/include
  cp -rv usr/include/* /cross-tools/${YLFS_TARGET}/include
#+END_SRC
*** GCC Static
Source: https://ftp.gnu.org/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.xz \\
Dependencies:
- https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.xz
- https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz
- https://ftp.gnu.org/gnu/gmp/gmp-6.2.0.tar.xz
Download sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/gmp/gmp-6.2.0.tar.xz
  wget https://ftp.gnu.org/gnu/mpc/mpc-1.1.0.tar.gz
  wget https://www.mpfr.org/mpfr-current/mpfr-4.1.0.tar.xz
  wget https://ftp.gnu.org/gnu/gcc/gcc-10.2.0/gcc-10.2.0.tar.xz
#+END_SRC
Extract GCC:
#+BEGIN_SRC shell
  tar -xf gcc-10.2.0.tar.xz
  cd gcc-10.2.0
#+END_SRC
Extract dependencies:
#+BEGIN_SRC shell
  tar -xf ../mpfr-4.1.0.tar.xz
  mv -v mpfr-4.1.0 mpfr
  tar -xf ../gmp-6.2.0.tar.xz
  mv -v gmp-6.2.0 gmp
  tar -xf ../mpc-1.1.0.tar.gz
  mv -v mpc-1.1.0 mpc
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  CFLAGS='-g0 -O0'   \
  CXXFLAGS='-g0 -O0' \
  ../configure                                            \
        --prefix=${YLFS}/cross-tools                      \
        --build=${MACHTYPE}                               \
        --host=${MACHTYPE}                                \
        --target=${YLFS_TARGET}                           \
        --with-sysroot=${YLFS}/cross-tools/${YLFS_TARGET} \
        --disable-nls                                     \
        --with-newlib                                     \
        --disable-libitm                                  \
        --disable-libvtv                                  \
        --disable-libssp                                  \
        --disable-shared                                  \
        --disable-libgomp                                 \
        --without-headers                                 \
        --disable-threads                                 \
        --disable-multilib                                \
        --disable-libatomic                               \
        --disable-libstdcxx                               \
        --enable-languages=c                              \
        --disable-libquadmath                             \
        --disable-libsanitizer                            \
        --with-arch=${YLFS_CPU}                           \
        --disable-decimal-float                           \
        --enable-clocale=generic
#+END_SRC
Build and install the only the minimum needed:
#+BEGIN_SRC shell
  make all-gcc all-target-libgcc
  make install-gcc install-target-libgcc
#+END_SRC
*** Musl
Source: https://www.musl-libc.org/releases/musl-1.2.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.musl-libc.org/releases/musl-1.2.1.tar.gz
  tar -xf musl-1.2.1.tar.gz
  cd musl-1.2.1
#+END_SRC
Configure cross build:
#+BEGIN_SRC shell
  ./configure \
    CROSS_COMPILE=${YLFS_TARGET}- \
    --prefix=/ \
    --target=${YLFS_TARGET}
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && DESTDIR=/cross-tools make install
#+END_SRC
Create the missing directory and link the library:
#+BEGIN_SRC shell
  mkdir -v /cross-tools/usr
  ln -sv ../include /cross-tools/usr/include
#+END_SRC
*** GCC Final
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Use =lib= instead of =lib64=, (for x86_64 only):
#+BEGIN_SRC shell
  sed -i '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
  sed -i 's/lib64/lib/'       gcc/config/i386/linux64.h
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  AR=ar LDFLAGS="-Wl,-rpath,/cross-tools/lib" \
  ../configure \
      --prefix=/cross-tools \
      --build=${YLFS_HOST} \
      --host=${YLFS_HOST} \
      --target=${YLFS_TARGET} \
      --disable-multilib \
      --with-sysroot=/cross-tools \
      --disable-nls \
      --enable-shared \
      --enable-languages=c,c++ \
      --enable-threads=posix \
      --enable-clocale=generic \
      --enable-libstdcxx-time \
      --enable-fully-dynamic-string \
      --disable-symvers \
      --disable-libsanitizer \
      --disable-lto-plugin \
      --disable-libssp
#+END_SRC
Build:
#+BEGIN_SRC shell
  make AS_FOR_TARGET="${YLFS_TARGET}-as" \
  LD_FOR_TARGET="${YLFS_TARGET}-ld"
#+END_SRC
Install
#+BEGIN_SRC shell
  make install
#+END_SRC
*** File
Source: ftp://ftp.astron.com/pub/file/file-5.39.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget ftp://ftp.astron.com/pub/file/file-5.39.tar.gz
  tar -xf file-5.39.tar.gz
  cd file-5.39
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/cross-tools --disable-libseccomp
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
* Tool Chain
** Packages
*** Musl
Configure sources:
#+BEGIN_SRC shell
  ./configure                     \
    CROSS_COMPILE="$YLFS_TARGET-" \
    --prefix=/                    \
    --target="$YLFS_TARGET"
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make DESTDIR=/tools install
#+END_SRC
Verify symlinks:
**** x86_64
#+BEGIN_SRC shell
  rm -v  /tools/lib/ld-musl-x86_64.so.1
  ln -sv libc.so /tools/lib/ld-musl-x86_64.so.1
#+END_SRC
**** i686
#+BEGIN_SRC shell
  rm -v  /tools/lib/ld-musl-i686.so.1
  ln -sv libc.so /tools/lib/ld-musl-i686.so.1
#+END_SRC
**** arm
#+BEGIN_SRC shell
  rm -v  /tools/lib/ld-musl-arm.so.1
  ln -sv libc.so /tools/lib/ld-musl-arm.so.1
#+END_SRC
*** Adjust Cross Tool Chain
Needed when host's libc isn't musl.\\
**** Modify compiler specs
Dump current cross-gcc specs:
#+BEGIN_SRC shell
  export SPECFILE=`dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
  ${YLFS_TARGET}-gcc -dumpspecs > specs
#+END_SRC
Modify dumped specs file:
***** x86_64
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/tools\/lib\/ld-musl-x86_64.so.1/g' specs
  grep "/tools/lib/ld-musl-x86_64.so.1" specs  --color=auto
#+END_SRC
***** i686
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-i386.so.1/\/tools\/lib\/ld-musl-i386.so.1/g' specs
  grep "/tools/lib/ld-musl-i386.so.1" specs  --color=auto
#+END_SRC
***** arm
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-arm/\/tools\/lib\/ld-musl-arm/g' specs
  grep "/tools/lib/ld-musl-arm" specs  --color=auto
#+END_SRC
**** Install specs
Install the modified specs:
#+BEGIN_SRC shell
  mv -v specs "$SPECFILE"
  unset SPECFILE
#+END_SRC
**** Check tool chain
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  ${YLFS_TARGET}-gcc test.c
  ${YLFS_TARGET}-readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]=.
**** Clean
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c
#+END_SRC
*** Setup
Export variables to use cross-tools:
#+BEGIN_SRC shell
  export CC="${YLFS_TARGET}-gcc"
  export CXX="${YLFS_TARGET}-g++"
  export AR="${YLFS_TARGET}-ar"
  export AS="${YLFS_TARGET}-as"
  export RANLIB="${YLFS_TARGET}-ranlib"
  export LD="${YLFS_TARGET}-ld"
  export STRIP="${YLFS_TARGET}-strip"
#+END_SRC
*** Binutils 1/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../configure                   \
      --prefix=/tools            \
      --with-sysroot="$YLFS"     \
      --with-lib-path=/tools/lib \
      --build="$YLFS_HOST"       \
      --host="$YLFS_TARGET"      \
      --target="$YLFS_TARGET"    \
      --disable-nls              \
      --disable-werror
#+END_SRC
Build:
#+BEGIN_SRC shell
  make
#+END_SRC
Create a symlink for =lib64= (only on x86_64):
#+BEGIN_SRC shell
  ln -sv lib /tools/lib64
#+END_SRC
Install:
#+BEGIN_SRC shell
  make install
#+END_SRC
*** GCC 1/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
**** Fix GCC linker
Fix GCC's default dynamic linker to use the one compiled in =/tools=.
***** x86_64 / i686
#+BEGIN_SRC shell
  for file in gcc/config/{linux,i386/linux{,64}}.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
Use =lib= instead of =lib64=, (for x86_64 only):
#+BEGIN_SRC shell
  sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
#+END_SRC
***** arm
#+BEGIN_SRC shell
  for file in gcc/config/arm/linux-eabi.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
**** Build
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  CFLAGS='-g0 -O0'   \
  CXXFLAGS='-g0 -O0' \
  ../configure                                       \
      --target="$YLFS_TARGET"                        \
      --build="$YLFS_HOST"                           \
      --host="$YLFS_TARGET"                          \
      --prefix=/tools                                \
      --with-sysroot="$YLFS"                         \
      --with-newlib                                  \
      --without-headers                              \
      --with-local-prefix=/tools                     \
      --with-native-system-header-dir=/tools/include \
      --disable-nls                                  \
      --disable-shared                               \
      --disable-multilib                             \
      --disable-threads                              \
      --disable-libatomic                            \
      --disable-libgomp                              \
      --disable-libquadmath                          \
      --disable-libssp                               \
      --disable-libvtv                               \
      --disable-libstdcxx                            \
      --enable-languages=c,c++                       \
      --disable-libstdcxx-pch                        \
      --disable-symvers                              \
      --disable-libitm                               \
      --disable-libsanitizer
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Kernel Headers
Clean sources:
#+BEGIN_SRC shell
  ARCH="$YLFS_ARCH" make mrproper
#+END_SRC
Build headers:
#+BEGIN_SRC shell
  ARCH="$YLFS_ARCH" make headers
#+END_SRC
Clean:
#+BEGIN_SRC shell
  find usr/include \( -name .install -o -name ..install.cmd \) -delete
  rm usr/include/Makefile
#+END_SRC
Install headers
#+BEGIN_SRC shell
  cp -rv usr/include/* /tools/include
#+END_SRC
*** Adjust Tool Chain
**** Modify compiler specs
Dump current cross-gcc specs:
#+BEGIN_SRC shell
  export SPECFILE=`dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name)`/specs
  ${YLFS_TARGET}-gcc -dumpspecs > specs
#+END_SRC
Modify dumped specs file:
***** x86_64
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-x86_64.so.1/\/tools\/lib\/ld-musl-x86_64.so.1/g' specs
  grep "/tools/lib/ld-musl-x86_64.so.1" specs  --color=auto
#+END_SRC
***** i686
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-i386.so.1/\/tools\/lib\/ld-musl-i386.so.1/g' specs
  grep "/tools/lib/ld-musl-i386.so.1" specs  --color=auto
#+END_SRC
***** arm
#+BEGIN_SRC shell
  sed -i 's/\/lib\/ld-musl-arm/\/tools\/lib\/ld-musl-arm/g' specs
  grep "/tools/lib/ld-musl-arm" specs  --color=auto
#+END_SRC
**** Install specs
Install the modified specs:
#+BEGIN_SRC shell
  mv -vf specs $SPECFILE
  unset SPECFILE
#+END_SRC
**** Check include
#+BEGIN_SRC shell
  GCC_INCLUDEDIR=`dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name)`/include &&
  find ${GCC_INCLUDEDIR}/* -maxdepth 0 -xtype d -exec rm -rvf '{}' \; &&
  rm -vf `grep -l "DO NOT EDIT THIS FILE" ${GCC_INCLUDEDIR}/*` &&
  unset GCC_INCLUDEDIR
#+END_SRC
**** Check tool chain
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  ${YLFS_TARGET}-gcc test.c
  ${YLFS_TARGET}-readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]=.
**** Clean
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c
#+END_SRC
*** Libstdcxx
Has to be done in the =gcc= source directory.\\
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../libstdc++-v3/configure           \
      --target="$YLFS_TARGET"         \
      --build="$YLFS_HOST"            \
      --host="$YLFS_TARGET"           \
      --prefix=/tools                 \
      --disable-multilib              \
      --disable-nls                   \
      --disable-libstdcxx-threads     \
      --disable-libstdcxx-pch         \
      --with-gxx-include-dir="/tools/${YLFS_TARGET}/include/c++/10.2.0"
#+END_SRC
Build and install:
#+BEGIN_SRC shell
make && make install
#+END_SRC
*** Binutils 2/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../configure                   \
      --prefix=/tools            \
      --with-sysroot             \
      --with-lib-path=/tools/lib \
      --build=${YLFS_HOST}       \
      --host=${YLFS_TARGET}      \
      --target=${YLFS_TARGET}    \
      --disable-nls              \
      --disable-werror
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Build and install the linker to the toolchain in order to adjust it later:
#+BEGIN_SRC shell
  make -C ld clean
  make -C ld LIB_PATH=/usr/lib:/lib
  cp -v ld/ld-new /tools/bin
#+END_SRC
*** GCC 2/2
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create a full version of the internal header as what the normal gcc build
system would do:
#+BEGIN_SRC shell
  cat gcc/limitx.h gcc/glimits.h gcc/limity.h > \
    $(dirname $(${YLFS_TARGET}-gcc -print-libgcc-file-name))/include-fixed/limits.h
#+END_SRC
**** Fix GCC linker
Fix GCC's default dynamic linker to use the one compiled in =/tools=.
***** x86_64 / i686
#+BEGIN_SRC shell
  for file in gcc/config/{linux,i386/linux{,64}}.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
***** arm
#+BEGIN_SRC shell
  for file in gcc/config/arm/linux-eabi.h; do
    cp -uv $file{,.orig}
    sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&@g' \
        -e 's@/usr@/tools@g' $file.orig > $file
    echo '
  #undef STANDARD_STARTFILE_PREFIX_1
  #undef STANDARD_STARTFILE_PREFIX_2
  #define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
  #define STANDARD_STARTFILE_PREFIX_2 ""' >> $file
    :> $file.orig
  done
#+END_SRC
**** Build
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../configure                                       \
      --target=${YLFS_TARGET}                        \
      --build=${YLFS_HOST}                           \
      --host=${YLFS_TARGET}                          \
      --prefix=/tools                                \
      --with-local-prefix=/tools                     \
      --with-native-system-header-dir=/tools/include \
      --disable-multilib                             \
      --disable-libgomp                              \
      --disable-libquadmath                          \
      --disable-libssp                               \
      --disable-libvtv                               \
      --disable-libstdcxx                            \
      --enable-languages=c,c++                       \
      --disable-libstdcxx-pch                        \
      --disable-symvers                              \
      --disable-libitm                               \
      --disable-libsanitizer
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  PATH=/bin:/usr/bin:/cross-tools/bin:/tools/bin make && make install
#+END_SRC
Link =cc= to =gcc= for better compatibility:
#+BEGIN_SRC shell
  ln -sv gcc /tools/bin/cc
#+END_SRC
**** Test compiler
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  cc test.c
  readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /tools/lib/ld-musl-arm.so.1]=.
**** Clean
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c
#+END_SRC
*** TODO TCL
Source: https://downloads.sourceforge.net/tcl/tcl8.6.10-src.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://downloads.sourceforge.net/tcl/tcl8.6.10-src.tar.gz
  tar -xf tcl8.6.10-src.tar.gz
  cd tcl8.6.10/unix
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ac_cv_func_strtod=yes             \
  tcl_cv_strtod_buggy=1             \
  ./configure --build="$YLFS_HOST"  \
              --host="$YLFS_TARGET" \
              --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Install headers:
#+BEGIN_SRC shell
  chmod -v u+w /tools/lib/libtcl8.6.so
  make install-private-headers
  ln -sv tclsh8.6 /tools/bin/tcls
#+END_SRC
*** TODO Expect
Source: https://downloads.sourceforge.net/project/expect/Expect/5.45.4/expect5.45.4.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://downloads.sourceforge.net/project/expect/Expect/5.45.4/expect5.45.4.tar.gz
  tar -xf expect5.45.4.tar.gz
  cd expect5.45.4
#+END_SRC
Update files to support Musl Libc for configure:
#+BEGIN_SRC shell
  cp -v ../../files/config.guess-musl tclconfig/config.guess
  cp -v ../../files/config.sub-musl tclconfig/config.sub
  cp -v configure{,.orig}
  sed 's:/usr/local/bin:/bin:' configure.orig > configure
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=${YLFS_HOST}  \
      --host=${YLFS_TARGET} \
      --prefix=/tools       \
      --with-tcl=/tools/lib \
      --with-tclinclude=/tools/include

#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make SCRIPTS="" install
#+END_SRC
*** TODO DejaGNU
Source: https://ftp.gnu.org/gnu/dejagnu/dejagnu-1.6.2.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/dejagnu/dejagnu-1.6.2.tar.gz
  tar -xf dejagnu-1.6.2.tar.gz
  cd dejagnu-1.6.2
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** M4
Source: https://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/m4/m4-1.4.18.tar.xz
  tar -xf m4-1.4.18.tar.xz
  cd m4-1.4.18
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Ncurses
Source: https://ftp.gnu.org/gnu/ncurses/ncurses-6.2.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/ncurses/ncurses-6.2.tar.gz
  tar -xf ncurses-6.2.tar.gz
  cd ncurses-6.2
#+END_SRC
Make sure =gawk= is found:
#+BEGIN_SRC shell
  sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools       \
      --with-shared         \
      --without-debug       \
      --without-ada         \
      --enable-widec        \
      --enable-overwrite    \
      --with-build-cc="gcc -D_GNU_SOURCE"
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Bash
Source: https://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/bash/bash-5.0.tar.gz
  tar -xf bash-5.0.tar.gz
  cd bash-5.0
#+END_SRC
Setup the correct values manually, since the configure script doesn't set them
well:
#+BEGIN_SRC shell
  cat > config.cache << "EOF"
  ac_cv_func_mmap_fixed_mapped=yes
  ac_cv_func_strcoll_works=yes
  ac_cv_func_working_mktime=yes
  bash_cv_func_sigsetjmp=present
  bash_cv_getcwd_malloc=yes
  bash_cv_job_control_missing=present
  bash_cv_printf_a_format=yes
  bash_cv_sys_named_pipes=present
  bash_cv_ulimit_maxfds=yes
  bash_cv_under_sys_siglist=yes
  bash_cv_unusable_rtsigs=no
  gt_cv_int_divbyzero_sigfpe=yes
  EOF
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
    ./configure               \
        --prefix=/tools       \
        --without-bash-malloc \
        --build="$YLFS_HOST"  \
        --host="$YLFS_TARGET" \
        --cache-file=config.cache
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Bison
Source: https://ftp.gnu.org/gnu/bison/bison-3.7.1.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/bison/bison-3.7.1.tar.xz
  tar -xf bison-3.7.1.tar.xz
  cd bison-3.7.1
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=${YLFS_HOST}  \
      --host=${YLFS_TARGET} \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Bzip2
Source: https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://sourceware.org/pub/bzip2/bzip2-1.0.8.tar.gz
  tar -xf bzip2-1.0.8.tar.gz
  cd bzip2-1.0.8
#+END_SRC
Fix =Makefiles= to install links and man pages in the correct location:
#+BEGIN_SRC shell
  cp Makefile{,.orig}
  sed -e "/^all:/s/ test//" Makefile.orig > Makefile
  sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
  sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
#+END_SRC
Clean and prepare sources:
#+BEGIN_SRC shell
  make -f Makefile-libbz2_so CC="${CC}" AR="${AR}" RANLIB="${RANLIB}"
  make clean
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make CC="${CC}" AR="${AR}" RANLIB="${RANLIB}"
  make PREFIX=/tools install
#+END_SRC
*** Coreutils
Source: https://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/coreutils/coreutils-8.32.tar.xz
  tar -xf coreutils-8.32.tar.xz
  cd coreutils-8.32
#+END_SRC
Create configure script:
#+BEGIN_SRC shell
  autoreconf -vif
#+END_SRC
Setup the correct values manually, since the configure script doesn't set them
well:
#+BEGIN_SRC shell
  cat > config.cache << EOF
  fu_cv_sys_stat_statfs2_bsize=no
  ac_cv_func_syncfs=no
  gl_cv_func_working_mkstemp=yes
  gl_cv_func_working_acl_get_file=yes
  EOF
#+END_SRC
Supress a test which may can cause an infinite loop:
#+BEGIN_SRC shell
  sed -i '/test.lock/s/^/#/' gnulib-tests/gnulib.mk
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure                           \
      --build=${YLFS_HOST}              \
      --host=${YLFS_TARGET}             \
      --prefix=/tools                   \
      --enable-install-program=hostname \
      --cache-file=config.cache
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Diffutils
Source: https://ftp.gnu.org/gnu/diffutils/diffutils-3.7.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/diffutils/diffutils-3.7.tar.xz
  tar -xf diffutils-3.7.tar.xz
  cd diffutils-3.7
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** File
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Findutils
Source: https://ftp.gnu.org/gnu/findutils/findutils-4.7.0.tar.xz \\
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/findutils/findutils-4.7.0.tar.xz
  tar -xf findutils-4.7.0.tar.xz
  cd findutils-4.7.0
#+END_SRC
Patch sources:
#+BEGIN_SRC shell
  sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' gl/lib/*.c
  sed -i '/unistd/a #include <sys/sysmacros.h>' gl/lib/mountlist.c
  echo "#define _IO_IN_BACKUP 0x100" >> gl/lib/stdio-impl.h
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Awk (mawk)
Source: https://invisible-island.net/datafiles/release/mawk.tar.gz \\
It may switch to =nawk=.
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://invisible-island.net/datafiles/release/mawk.tar.gz
  tar -xf mawk.tar.gz
  cd mawk-1.3.4-20200120
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  ln -sv /tools/bin/mawk /tools/bin/awk
#+END_SRC
*** Gettext (gettext-tiny)
Source: https://ftp.barfooze.de/pub/sabotage/tarballs/gettext-tiny-0.3.2.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.barfooze.de/pub/sabotage/tarballs/gettext-tiny-0.3.2.tar.xz
  tar -xf gettext-tiny-0.3.2.tar.xz
  cd gettext-tiny-0.3.2
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make LIBINTL=MUSL
  make LIBINTL=MUSL prefix=/tools install
#+END_SRC
*** Grep
Source: https://ftp.gnu.org/gnu/grep/grep-3.4.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/grep/grep-3.4.tar.xz
  tar -xf grep-3.4.tar.xz
  cd grep-3.4
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=${YLFS_HOST}  \
      --host=${YLFS_TARGET} \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Gzip
Source: https://ftp.gnu.org/gnu/gzip/gzip-1.10.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/gzip/gzip-1.10.tar.xz
  tar -xf gzip-1.10.tar.xz
  cd gzip-1.10
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=$"YLFS_HOST"  \
      --host=$"YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Make
Source: https://ftp.gnu.org/gnu/make/make-4.3.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/make/make-4.3.tar.gz
  tar -xf make-4.3.tar.gz
  cd make-4.3
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=${YLFS_HOST}  \
      --host=${YLFS_TARGET} \
      --without-guile       \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Patch
Source: https://ftp.gnu.org/gnu/patch/patch-2.7.6.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/patch/patch-2.7.6.tar.xz
  tar -xf patch-2.7.6.tar.xz
  cd patch-2.7.6
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=${YLFS_HOST}  \
      --host=${YLFS_TARGET} \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Perl
Sources:
  - https://www.cpan.org/src/5.0/perl-5.32.0.tar.xz
  - https://github.com/arsv/perl-cross/releases/download/1.3.4/perl-cross-1.3.4.tar.gz
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.cpan.org/src/5.0/perl-5.32.0.tar.xz
  wget https://github.com/arsv/perl-cross/releases/download/1.3.4/perl-cross-1.3.4.tar.gz
  tar -xf perl-5.32.0.tar.xz
  tar -xf perl-cross-1.3.4.tar.gz
  cd perl-5.32.0
  mv -v ../perl-cross-1.3.4/* ./
  mv -v ../perl-cross-1.3.4/utils/* utils/
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure        \
      --prefix=/tool \
      --target=${YLFS_TARGET}
#+END_SRC
Build:
#+BEGIN_SRC shell
  make
#+END_SRC
Install needed programs and libraries:
#+BEGIN_SRC shell
  cp -v perl cpan/podlators/scripts/pod2man /tools/bin
  mkdir -pv /tools/lib/perl5/5.32.0
  cp -Rv lib/* /tools/lib/perl5/5.32.0
#+END_SRC
*** Sed
Source: https://ftp.gnu.org/gnu/sed/sed-4.8.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/sed/sed-4.8.tar.xz
  tar -xf sed-4.8.tar.xz
  cd sed-4.8
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build=${YLFS_HOST}  \
      --host=${YLFS_TARGET} \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Tar
Source: https://ftp.gnu.org/gnu/tar/tar-1.32.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/tar/tar-1.32.tar.xz
  tar -xf tar-1.32.tar.xz
  cd tar-1.32
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Xz
Source: https://tukaani.org/xz/xz-5.2.5.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://tukaani.org/xz/xz-5.2.5.tar.xz
  tar -xf xz-5.2.5.tar.xz
  cd xz-5.2.5
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --build="$YLFS_HOST"  \
      --host="$YLFS_TARGET" \
      --prefix=/tools
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Lzip
Source: https://download.savannah.gnu.org/releases/lzip/lzip-1.21.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://download.savannah.gnu.org/releases/lzip/lzip-1.21.tar.gz
  tar -xf lzip-1.21.tar.gz
  cd lzip-1.21
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/tools
#+END_SRC
Force =make= to use the new =g++= instead of the host's one:
#+BEGIN_SRC shell
sed -i 's/CXX = g++/CXX = ${YLFS_TARGET}-g++/g' Makefile
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
* Final system
** Preparation
*** Clean
Remove debug symbols:
#+BEGIN_SRC shell
  strip --strip-debug /tools/lib/*
  /usr/bin/strip --strip-unneeded /tools/{,s}bin/*
#+END_SRC
Remove the documentation:
#+BEGIN_SRC shell
  rm -rf /tools/{,share}/{info,man,doc}
#+END_SRC
Remove unneeded files:
#+BEGIN_SRC shell
  find /tools/{lib,libexec} -name \*.la -delete
#+END_SRC
*** Ownership
Change tools directory's owner to avoid later conflicts:
#+BEGIN_SRC shell
  chown -R root:root "$YLFS/tools"
#+END_SRC
*** VKFS
Switch to root user:
#+BEGIN_SRC shell
  sudo su
#+END_SRC
Export again variables:
#+BEGIN_SRC shell
  export YLFS=/mnt/ylfs
#+END_SRC
Create new directories and nodes:
#+BEGIN_SRC shell
  mkdir -pv "$YLFS/{dev,proc,sys,run}"
  mknod -m 600 "$YLFS/dev/console" c 5 1
  mknod -m 666 "$YLFS/dev/null" c 1 3
#+END_SRC
Mount the new virtual file system:
#+BEGIN_SRC shell
  mount -v --bind /dev "$YLFS/dev"
  mount -vt devpts devpts "$YLFS/dev/pts -o gid=5,mode=620"
  mount -vt proc proc ${YLFS}/proc
  mount -vt sysfs sysfs ${YLFS}/sys
  mount -vt tmpfs tmpfs ${YLFS}/run
  if [ -h ${YLFS}/dev/shm ]; then
    mkdir -pv "$YLFS/$(readlink $YLFS/dev/shm)"
  fi
#+END_SRC
*** Chroot
Enter the chroot:
#+BEGIN_SRC shell
  chroot "$YLFS" /tools/bin/env -i                  \
      HOME=/root                                    \
      TERM="$TERM"                                  \
      PS1='(ylfs chroot) \u:\w\$ '                  \
      PATH=/bin:/usr/bin:/sbin:/usr/sbin:/tools/bin \
      /tools/bin/bash --login +h
#+END_SRC
*** Directories
Create a standard directory structure:
#+BEGIN_SRC shell
  mkdir -pv /{bin,etc/{opt,sysconfig},home,lib/firmware,mnt,opt}
  mkdir -pv /{media/{floppy,cdrom},sbin,srv,var}
  install -dv -m 0750 /root
  install -dv -m 1777 /tmp /var/tmp
  mkdir -pv /usr/{,local/}{bin,include,lib,sbin,src}
  mkdir -pv /usr/{,local/}share/{color,dict,doc,info,locale,man}
  mkdir -v  /usr/{,local/}share/{misc,terminfo,zoneinfo}
  mkdir -v  /usr/libexec
  mkdir -pv /usr/{,local/}share/man/man{1..8}
  mkdir -v /var/{log,mail,spool}
  ln -sv /run /var/run
  ln -sv /run/lock /var/lock
  mkdir -pv /var/{opt,cache,lib/{color,misc,locate},local}
#+END_SRC
*** Files
Create symlinks for files that need hard-wired paths:
#+BEGIN_SRC shell
  ln -sv /tools/bin/{bash,cat,dd,echo,ln,pwd,rm,stty} /bin
  ln -sv /tools/bin/{install,perl} /usr/bin
  ln -sv /tools/lib/libgcc_s.so{,.1} /usr/lib
  ln -sv /tools/lib/libstdc++.{a,so{,.6}} /usr/lib
  ln -sv bash /bin/sh
#+END_SRC
Create a symlink for programs that needs =/etc/mtab=:
#+BEGIN_SRC shell
  ln -sv /proc/self/mounts /etc/mtab
#+END_SRC
Create the root user in =/etc/passwd= and =/etc/group=:
#+BEGIN_SRC shell
  cat > /etc/passwd << "EOF"
  root:x:0:0:root:/root:/bin/bash
  bin:x:1:1:bin:/dev/null:/bin/false
  daemon:x:6:6:Daemon User:/dev/null:/bin/false
  messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
  nobody:x:99:99:Unprivileged User:/dev/null:/bin/false
  EOF

  cat > /etc/group << "EOF"
  root:x:0:
  bin:x:1:daemon
  sys:x:2:
  kmem:x:3:
  tape:x:4:
  tty:x:5:
  daemon:x:6:
  floppy:x:7:
  disk:x:8:
  lp:x:9:
  dialout:x:10:
  audio:x:11:
  video:x:12:
  utmp:x:13:
  usb:x:14:
  cdrom:x:15:
  adm:x:16:
  messagebus:x:18:
  input:x:24:
  mail:x:34:
  nogroup:x:99:
  users:x:999:
  EOF
#+END_SRC
Start a new shell:
#+BEGIN_SRC shell
  exec /tools/bin/bash --login +h
#+END_SRC
Create log files and give them correct permissions:
#+BEGIN_SRC shell
  touch /var/log/{btmp,lastlog,faillog,wtmp}
  chgrp -v utmp /var/log/lastlog
  chmod -v 664  /var/log/lastlog
  chmod -v 600  /var/log/btmp
#+END_SRC
** Packages
*** Kernel Headers
Clean sources:
#+BEGIN_SRC shell
  make mrproper
#+END_SRC
Build headers:
#+BEGIN_SRC shell
  make headers
#+END_SRC
Clean:
#+BEGIN_SRC shell
  find usr/include '.*' -delete
  rm usr/include/Makefile
#+END_SRC
Install headers
#+BEGIN_SRC shell
  cp -rv usr/include/* /usr/include
#+END_SRC
*** Man pages
Source: https://www.kernel.org/pub/linux/docs/man-pages/man-pages-5.08.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.kernel.org/pub/linux/docs/man-pages/man-pages-5.08.tar.xz
  tar -xf man-pages-5.08.tar.xz
  cd man-pages-5.08
#+END_SRC
Install:
#+BEGIN_SRC shell
  make install
#+END_SRC
*** Musl
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr -disable-gcc-wrapper
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Setup =arch=:
#+BEGIN_SRC shell
  case $(uname -m) in
    x86_64) export ARCH="x86_64"
            ;;
    i686)   export ARCH="i386"
            ;;
    arm*)   export ARCH="arm"
            ;;
  esac
#+END_SRC
Link =ldd=:
#+BEGIN_SRC shell
  ln -sv /lib/ld-musl-$ARCH.so.1 /bin/ldd
#+END_SRC
Config for dynamic library loading:
#+BEGIN_SRC shell
  cat > /etc/ld-musl-$ARCH.path << "EOF"
  /lib
  /usr/local/lib
  /usr/lib
  EOF

  unset ARCH
#+END_SRC
Link a fake =ldconfig=:
#+BEGIN_SRC shell
  ln -s /bin/true /usr/bin/ldconfig
#+END_SRC
*** System time
Source: https://data.iana.org/time-zones/releases/tzdb-2020a.tar.lz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://data.iana.org/time-zones/releases/tzdb-2020a.tar.lz
  tar -xf tzdb-2020a.tar.lz
  cd tzdb-2020a
#+END_SRC
Build:
#+BEGIN_SRC shell
  make TZDIR=/usr/share/zoneinfo
#+END_SRC
Install tools:
#+BEGIN_SRC shell
  cp -v zic zdump /usr/sbin
  cp -v tzselect  /usr/bin
#+END_SRC
Install data:
#+BEGIN_SRC shell
  mkdir -pv /usr/share/zoneinfo/{posix,right}
  install -m444 -t /usr/share/zoneinfo iso3166.tab zone1970.tab zone.tab
  export timezones="africa antarctica asia australasia europe northamerica \
                  southamerica pacificnew etcetera backward systemv factory"
  zic -y ./yearistype -d /usr/share/zoneinfo ${timezones}
  zic -y ./yearistype -d /usr/share/zoneinfo/posix ${timezones}
  zic -y ./yearistype -d /usr/share/zoneinfo/right -L leapseconds ${timezones}
  zic -y ./yearistype -d /usr/share/zoneinfo -p America/New_York
  unset timezones
#+END_SRC
Set time zone:
#+BEGIN_SRC shell
  cp -v /usr/share/zoneinfo/xxx /etc/localtime
#+END_SRC
*** Adjust toolchain
**** CPU configuration
***** x86_64
Set build options for 64 bit CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="x86_64-ylfs-linux-musl"
#+END_SRC
***** i686
Set build options for 32 bit CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="i686-ylfs-linux-musl"
#+END_SRC
***** ARM
****** armv7
Set build options for armv7 CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="armv7l-ylfs-linux-musl"
#+END_SRC
****** armv6
Set build options for armv6 CPUs:
#+BEGIN_SRC shell
  export YLFS_TARGET="armv6l-ylfs-linux-musl"
#+END_SRC
**** Adjust linker and toolchain
Save the old linker:
#+BEGIN_SRC shell
  mv -v /tools/bin/{ld,ld-old}
  mv -v /tools/${YLFS_TARGET}/bin/{ld,ld-old}
  mv -v /tools/bin/{ld-new,ld}
  ln -sv /tools/bin/ld /tools/${YLFS_TARGET}/bin/ld
#+END_SRC
Fix the compiler specification:
#+BEGIN_SRC shell
  export SPECFILE=`dirname $(gcc -print-libgcc-file-name)`/specs
  gcc -dumpspecs | sed -e 's@/tools@@g'                   \
      -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
      -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' >  tempspecfile

  mv -vf tempspecfile $SPECFILE &&
  unset SPECFILE
#+END_SRC
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  cc test.c -v -Wl,--verbose &> dummy.log
  readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /lib/ld-musl-arm.so.1]=.
**** Other tests
Test if the compiler uses the correct start files:
#+BEGIN_SRC shell
  grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log
#+END_SRC
Output should be:
#+BEGIN_SRC shell
  /usr/lib/crt1.o succeeded
  /usr/lib/crti.o succeeded
  /usr/lib/crtn.o succeeded
#+END_SRC
Check header files location:
#+BEGIN_SRC shell
  grep -B1 '^ /usr/include' dummy.log
#+END_SRC
Output should be:
#+BEGIN_SRC shell
  #include <...> search starts here:
  /usr/include
#+END_SRC
Verify the linker uses the correct search paths:
#+BEGIN_SRC shell
  grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
#+END_SRC
Output should be (the first and last lines are only needed on 64-bit CPUs):
#+BEGIN_SRC shell
  SEARCH_DIR("=/tools/x86_64-ylfs-linux-musl/lib64")
  SEARCH_DIR("/usr/lib")
  SEARCH_DIR("/lib")
  SEARCH_DIR("=/tools/x86_64-ylfs-linux-musl/lib")
#+END_SRC
Clean the outputed file:
#+BEGIN_SRC shell
  rm -v a.out test.c dummy.log
#+END_SRC
*** Argp
Source: https://www.lysator.liu.se/~nisse/misc/argp-standalone-1.3.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.lysator.liu.se/~nisse/misc/argp-standalone-1.3.tar.gz
  tar -xf argp-standalone-1.3.tar.gz
  cd argp-standalone-1.3
#+END_SRC
Patch sources to compile under Musl libc:
#+BEGIN_SRC shell
  patch -Np0 -i /patches/argp-standalone-1.3-void-fix-no_use_inline.patch
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  CFLAGS=" -fPIC" ./configure --prefix=/usr --disable-static
#+END_SRC
Build:
#+BEGIN_SRC shell
  make
#+END_SRC
Install:
#+BEGIN_SRC shell
  cp -v libargp.a /usr/lib/
  cp -v argp.h    /usr/include/
#+END_SRC
*** Zlib
Source: https://zlib.net/zlib-1.2.11.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://zlib.net/zlib-1.2.11.tar.xz 
  tar -xf zlib-1.2.11.tar.xz 
  cd zlib-1.2.11
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Fix location of libs:
#+BEGIN_SRC shell
  mv -v /usr/lib/libz.so.* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libz.so) /usr/lib/libz.so
#+END_SRC
*** File
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Readline
Source: https://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/readline/readline-8.0.tar.gz
  tar -xf readline-8.0.tar.gz
  cd readline-8.0
#+END_SRC
Avoid a rare possibility of a linking bug in ldconfig:
#+BEGIN_SRC shell
  sed -i '/MV.*old/d' Makefile.in
  sed -i '/{OLDSUFF}/c:' support/shlib-install
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure          \
      --prefix=/usr    \
      --disable-static \
      --docdir=/usr/share/doc/readline-8.0
#+END_SRC
Build:
#+BEGIN_SRC shell
  make SHLIB_LIBS="-L/tools/lib -lncursesw"
#+END_SRC
Install and fix misplaced files
#+BEGIN_SRC shell
  make SHLIB_LIBS="-L/tools/lib -lncurses" install
  mv -v /usr/lib/lib{readline,history}.so.* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libreadline.so) /usr/lib/libreadline.so
  ln -sfv ../../lib/$(readlink /usr/lib/libhistory.so ) /usr/lib/libhistory.so
#+END_SRC
*** M4
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Binutils
Delete the old build directory:
#+BEGIN_SRC shell
  rm -rf build/
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ../configure                                \
      --prefix=/usr                           \
      --enable-gold                           \
      --enable-ld=default                     \
      --enable-plugins                        \
      --enable-shared                         \
      --disable-werror                        \
      --enable-64-bit-bfd                     \
      --with-system-zlib                      \
      --enable-relro                          \
      --enable-lto                            \
      --disable-nls                           \
      --enable-deterministic-archives         \
      --enable-threads                        \
      --disable-compressed-debug-sections     \
      --enable-targets=i386-efi-pe,x86_64-pep \
      --with-mmap
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make tooldir=/usr && make tooldir=/usr install
#+END_SRC
*** GMP
Configure sources:
#+BEGIN_SRC shell
  ./configure          \
      --prefix=/usr    \
      --enable-cxx     \
      --disable-static \
      --docdir=/usr/share/doc/gmp-6.2.0
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** MPFR
Configure sources:
#+BEGIN_SRC shell
  ./configure              \
      --prefix=/usr        \
      --disable-static     \
      --enable-thread-safe \
      --docdir=/usr/share/doc/mpfr-4.1.0
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** MPC
Configure sources:
#+BEGIN_SRC shell
  ./configure              \
      --prefix=/usr        \
      --docdir=/usr/share/doc/mpc-1.1.0
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Shadow
Source: https://github.com/shadow-maint/shadow/releases/download/4.8.1/shadow-4.8.1.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/shadow-maint/shadow/releases/download/4.8.1/shadow-4.8.1.tar.xz
  tar -xf shadow-4.8.1.tar.xz
  cd shadow-4.8.1
#+END_SRC
Disable groups, since toybox provides one:
#+BEGIN_SRC shell
  sed -i 's/groups$(EXEEXT) //' src/Makefile.in
  find man -name Makefile.in -exec sed -i 's/groups\.1 / /'   {} \;
  find man -name Makefile.in -exec sed -i 's/getspnam\.3 / /' {} \;
  find man -name Makefile.in -exec sed -i 's/passwd\.5 / /'   {} \;
  sed -i -e 's@#ENCRYPT_METHOD DES@ENCRYPT_METHOD SHA512@' \
         -e 's@/var/spool/mail@/var/mail@' etc/login.defs
  sed -i 's/1000/999/' etc/useradd
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --sysconfdir=/etc --with-group-name-max-length=32
#+END_SRC
Build and install in another loaction than the different one:
#+BEGIN_SRC shell
  make && make install
  mv -v /usr/bin/passwd /bin
  sed -i 's/yes/no/' /etc/default/useradd
#+END_SRC
Set system root password:
#+BEGIN_SRC shell
  passwd root
#+END_SRC
*** GCC
Dependency: https://isl.gforge.inria.fr/isl-0.22.tar.xz \\
Download and extract dependencies:
#+BEGIN_SRC shell
  wget https://isl.gforge.inria.fr/isl-0.22.tar.xz
  cd gcc-10.2.0
  tar -xf ../isl-0.22.tar.xz
  mv -v isl-0.22 isl
#+END_SRC
**** Setup TRUPLE
***** x86_64
#+BEGIN_SRC shell
  export TRUPLE="x86_64-linux-musl"
#+END_SRC
***** i686
#+BEGIN_SRC shell
  export TRUPLE="i686-linux-musl"
#+END_SRC
***** ARM
****** armv6
#+BEGIN_SRC shell
  export TRUPLE="armv7l-linux-musleabihf"
#+END_SRC
****** armv7
#+BEGIN_SRC shell
  export TRUPLE="armv6l-linux-musleabihf"
#+END_SRC
**** Continue building
Use =lib= instead of =lib64=, (for x86_64 only):
#+BEGIN_SRC shell
  sed -e '/m64=/s/lib64/lib/' -i.orig gcc/config/i386/t-linux64
#+END_SRC
Set up an optimization level:
#+BEGIN_SRC shell
  sed -i "/ac_cpp=/s/\$CPPFLAGS/\$CPPFLAGS -O2/" {gcc,libiberty}/configure
#+END_SRC
Create the build directory:
#+BEGIN_SRC shell
  mkdir -v build && cd build
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  SED=sed  libat_cv_have_ifunc=no  \
     ../configure                  \
     --prefix=/usr                 \
     --build="$TRUPLE"             \
     --with-system-zlib            \
     --with-isl                    \
     --with-linker-hash-style=gnu  \
     --enable-languages=c,c++      \
     --enable-threads=posix        \
     --enable-clocale=generic      \
     --enable-languages=c,c++      \
     --enable-tls                  \
     --enable-libstdcxx-time       \
     --enable-fully-dynamic-string \
     --enable-default-pie          \
     --enable-default-ssp          \
     --enable-vtable-verify        \
     --enable-linker-build-id      \
     --enable-fast-character       \
     --disable-libstdcxx-pch       \
     --disable-nls                 \
     --disable-multilib            \
     --disable-bootstrap           \
     --disable-symvers             \
     --disable-libsanitizer        \
     --disable-target-libiberty    \
     --disable-libunwind-exceptions 
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install

  ln -sv ../usr/bin/cpp /lib
  ln -sv gcc /usr/bin/cc
#+END_SRC
Enable LTO:
#+BEGIN_SRC shell
  install -v -dm755 /usr/lib/bfd-plugins
  ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/9.1.0/liblto_plugin.so \
          /usr/lib/bfd-plugins/
  mkdir -pv /usr/share/gdb/auto-load/usr/lib
  mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib
#+END_SRC
Create test file to test the compiler:
#+BEGIN_SRC shell
  echo 'int main(){}' > test.c
#+END_SRC
Compile and test the test file:
#+BEGIN_SRC shell
  cc test.c -v -Wl,--verbose &> dummy.log
  readelf -l a.out | grep Requesting
#+END_SRC
***** x86_64
Output should be: =[Requesting program interpreter: /lib/ld-musl-x86_64.so.1]=.
***** i686
Output should be: =[Requesting program interpreter: /lib/ld-musl-i386.so.1]=.
***** arm
Output should be: =[Requesting program interpreter: /lib/ld-musl-arm.so.1]=.
**** Other tests
Test library path:
#+BEGIN_SRC shell
  grep 'crt[1in].o succeeded' dummy.log
#+END_SRC
Output should be:
#+BEGIN_SRC shell
  attempt to open /usr/lib/gcc/$ARCH-linux-musl/10.2.0/../../../../lib/Scrt1.o succeeded
  attempt to open /usr/lib/gcc/$ARCH-linux-musl/10.2.0/../../../../lib/crti.o succeeded
  attempt to open /usr/lib/gcc/$ARCH-linux-musl/10.2.0/../../../../lib/crtn.o succeeded
#+END_SRC
Test include path:
#+BEGIN_SRC shell
  grep -B2 '^ /usr/lib/gcc' dummy.log
#+END_SRC
Output should be:
#+BEGIN_SRC shell
  #include <...> search starts here:
  /usr/lib/gcc/$ARCH-linux-musl/10.2.0/include-fixed
  /usr/local/include
  /usr/include
  /usr/lib/gcc/$ARCH-linux-musl/10.2.0/include
#+END_SRC
Test search directories:
#+BEGIN_SRC shell
  grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'
#+END_SRC
Output should be:
#+BEGIN_SRC shell
  SEARCH_DIR("/usr/$ARCH-pc-linux-musl/lib32")
  SEARCH_DIR("/usr/local/lib32")
  SEARCH_DIR("/lib32")
  SEARCH_DIR("/usr/lib32")
  SEARCH_DIR("/usr/$ARCH-pc-linux-musl/lib")
  SEARCH_DIR("/usr/local/lib")
  SEARCH_DIR("/lib")
  SEARCH_DIR("/usr/lib");
#+END_SRC
Clean:
#+BEGIN_SRC shell
  rm -v test.c a.out dummy.log
#+END_SRC
Get utilities:
#+BEGIN_SRC shell
  cc -fpie ../files/musl/getent.c -o getent
  cc -fpie ../files/musl/getconf.c -o getconf
  cc -fpie ../files/musl/iconv.c -o iconv

  cp -v getent  /usr/bin/
  cp -v getconf /usr/bin/
  cp -v iconv   /usr/bin/
  cp -v ../files/musl/getent.1   /usr/share/man/man1/
  cp -v ../files/musl/getconf.1  /usr/share/man/man1/
#+END_SRC
*** Bzip2
Patch sources:
#+BEGIN_SRC shell
  patch -Np1 -i ../patches/bzip2-1.0.6-install_docs-1.patch
  sed -i 's@\(ln -s -f \)$(PREFIX)/bin/@\1@' Makefile
  sed -i "s@(PREFIX)/man@(PREFIX)/share/man@g" Makefile
#+END_SRC
Prepare sources:
#+BEGIN_SRC shell
  make -f Makefile-libbz2_so
  make clean
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make PREFIX=/usr install
  cp -v bzip2-shared /bin/bzip2
  cp -av libbz2.so* /lib
  ln -sv ../../lib/libbz2.so.1.0 /usr/lib/libbz2.so
  rm -v /usr/bin/{bunzip2,bzcat,bzip2}
  ln -sv bzip2 /bin/bunzip2
  ln -sv bzip2 /bin/bzcat
#+END_SRC
*** Pkgconfig
Source: https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://pkg-config.freedesktop.org/releases/pkg-config-0.29.2.tar.gz
  tar -xf pkg-config-0.29.2.tar.gz
  cd pkg-config-0.29.2
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure                    \
      --prefix=/usr              \
      --with-internal-glib       \
      --disable-host-tool        \
      --docdir=/usr/share/doc/pkg-config-0.29.2
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Ncurses
Patch a static library:
#+BEGIN_SRC shell
  sed -i '/LIBTOOL_INSTALL/d' c++/Makefile.in
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure                 \
      --prefix=/usr           \
      --mandir=/usr/share/man \
      --with-shared           \
      --without-debug         \
      --without-normal        \
      --enable-pc-files       \
      --enable-widec
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Fix misplaced files:
#+BEGIN_SRC shell
  mv -v /usr/lib/libncursesw.so.6* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libncursesw.so) /usr/lib/libncursesw.so
#+END_SRC
Fix non-wide characters in the linker:
#+BEGIN_SRC shell
  for lib in ncurses form panel menu ; do
      rm -vf                    /usr/lib/lib${lib}.so
      echo "INPUT(-l${lib}w)" > /usr/lib/lib${lib}.so
      ln -sfv ${lib}w.pc        /usr/lib/pkgconfig/${lib}.pc
  done
#+END_SRC
Fix =-lcurses=:
#+BEGIN_SRC shell
  rm -vf                     /usr/lib/libcursesw.so
  echo "INPUT(-lncursesw)" > /usr/lib/libcursesw.so
  ln -sfv libncurses.so      /usr/lib/libcurses.so
#+END_SRC
*** Attr
Source: https://download.savannah.gnu.org/releases/attr/attr-2.4.48.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://download.savannah.gnu.org/releases/attr/attr-2.4.48.tar.gz
  tar -xf attr-2.4.48.tar.gz
  cd attr-2.4.48
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure           \
      --prefix=/usr     \
      --bindir=/bin     \
      --disable-static  \
      --sysconfdir=/etc \
      --docdir=/usr/share/doc/attr-2.4.48
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install

  mv -v /usr/lib/libattr.so.* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libattr.so) /usr/lib/libattr.so
#+END_SRC
*** ACL
Source: https://download.savannah.gnu.org/releases/acl/acl-2.2.53.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://download.savannah.gnu.org/releases/acl/acl-2.2.53.tar.gz
  tar -xf acl-2.2.53.tar.gz
  cd acl-2.2.53
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --prefix=/usr         \
      --bindir=/bin         \
      --disable-static      \
      --libexecdir=/usr/lib \
      --docdir=/usr/share/doc/acl-2.2.53
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  mv -v /usr/lib/libacl.so.* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libacl.so) /usr/lib/libacl.so
#+END_SRC
*** Libcap
Source: https://www.kernel.org/pub/linux/libs/security/linux-privs/libcap2/libcap-2.43.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.kernel.org/pub/linux/libs/security/linux-privs/libcap2/libcap-2.43.tar.xz
  tar -xf libcap-2.43.tar.xz
  cd libcap-2.43
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  sed -i '/install.*STALIBNAME/d' libcap/Makefile
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make RAISE_SETFCAP=no lib=lib prefix=/usr install

  chmod -v 755 /usr/lib/libcap.so
  mv -v /usr/lib/libcap.so.* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libcap.so) /usr/lib/libcap.so
#+END_SRC
*** PSMisc
Source: https://sourceforge.net/projects/psmisc/files/psmisc/psmisc-23.3.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://sourceforge.net/projects/psmisc/files/psmisc/psmisc-23.3.tar.xz
  tar -xf psmisc-23.3.tar.xz
  cd psmisc-23.3
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  mv -v /usr/bin/fuser   /bin
  mv -v /usr/bin/killall /bin
#+END_SRC
*** Iana-etc
Source: http://anduin.linuxfromscratch.org/LFS/iana-etc-2.30.tar.bz2 \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget http://anduin.linuxfromscratch.org/LFS/iana-etc-2.30.tar.bz2
  tar -xf iana-etc-2.30.tar.bz2
  cd iana-etc-2.30
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Bison
Configure sources:
#+BEGIN_SRC shell
  ./configure       \
      --prefix=/usr \
      --docdir=/usr/share/doc/bison-3.7.1
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Flex
Source: https://github.com/westes/flex/releases/download/v2.6.4/flex-2.6.4.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/westes/flex/releases/download/v2.6.4/flex-2.6.4.tar.gz
  tar -xf flex-2.6.4.tar.gz
  cd flex-2.6.4
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  HELP2MAN=/tools/bin/true \
          ./configure      \
          --prefix=/usr    \
          --docdir=/usr/share/doc/flex-2.6.4
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  ln -sv flex /usr/bin/lex
#+END_SRC
*** Bash
Configure sources:
#+BEGIN_SRC shell
  ./configure                          \
      --prefix=/usr                    \
      --docdir=/usr/share/doc/bash-5.0 \
      --without-bash-malloc            \
      --with-installed-readline
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  mv -vf /usr/bin/bash /bin
#+END_SRC
*** Libtool
Source: https://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/libtool/libtool-2.4.6.tar.xz
  tar -xf libtool-2.4.6.tar.xz
  cd libtool-2.4.6
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Gdbm
Source: https://ftp.gnu.org/gnu/gdbm/gdbm-1.18.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/gdbm/gdbm-1.18.1.tar.gz
  tar -xf gdbm-1.18.1.tar.gz
  cd gdbm-1.18.1
#+END_SRC
Patch sources:
#+BEGIN_SRC shell
  patch -Np0 -i /patches/gdbl-gcc10.patch
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure          \
      --prefix=/usr    \
      --disable-static \
      --enable-libgdbm-compat
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Gperf
Source: https://ftp.gnu.org/gnu/gperf/gperf-3.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/gperf/gperf-3.1.tar.gz
  tar -xf gperf-3.1.tar.gz
  cd gperf-3.1
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure       \
      --prefix=/usr \
      --docdir=/usr/share/doc/gperf-3.1
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Expat
Source: https://prdownloads.sourceforge.net/expat/expat-2.2.9.tar.bz2 \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://prdownloads.sourceforge.net/expat/expat-2.2.9.tar.bz2
  tar -xf expat-2.2.9.tar.bz2
  cd expat-2.2.9
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  sed -i 's|usr/bin/env |bin/|' run.sh.in

  ./configure          \
      --prefix=/usr    \
      --disable-static \
      --docdir=/usr/share/doc/expat-2.2.9
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Inetutils
Source: https://ftp.gnu.org/gnu/inetutils/inetutils-1.9.4.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/inetutils/ineutils-1.9.4.tar.gz
  tar -xf inetutils-1.9.4.tar.gz
  cd inetutils-1.9.4
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure              \
      --prefix=/usr        \
      --localstatedir=/var \
      --disable-logger     \
      --disable-whois      \
      --disable-rcp        \
      --disable-rexec      \
      --disable-rlogin     \
      --disable-rsh        \
      --disable-servers
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Perl
Export config variables:
#+BEGIN_SRC shell
  echo "127.0.0.1 localhost $(hostname)" > /etc/hosts
  export BUILD_ZLIB=False
  export BUILD_BZIP2=0
  export CF_OLD="$CFLAGS"
  export CFLAGS+=" -DNO_POSIX_2008_LOCALE"
  export CFLAGS+=" -D_GNU_SOURCE"
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  sh Configure -des                \
     -Dprefix=/usr                 \
     -Dvendorprefix=/usr           \
     -Dman1dir=/usr/share/man/man1 \
     -Dman3dir=/usr/share/man/man3 \
     -Dpager="/usr/bin/less -isR"  \
     -Duseshrplib                  \
     -Dusethreads
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  export CFLAGS="$CF_OLD"
  unset BUILD_ZLIB BUILD_BZIP2 CF_OLD
#+END_SRC
*** XML::Parser
Source: https://cpan.metacpan.org/authors/id/T/TO/TODDR/XML-Parser-2.46.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://cpan.metacpan.org/authors/id/T/TO/TODDR/XML-Parser-2.46.tar.gz
  tar -xf XML-Parser-2.46.tar.gz
  cd XML-Parser-2.46
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  perl Makefile.PL && make && make install
#+END_SRC
*** Autoconf
Source: https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.xz
  tar -xf autoconf-2.69.tar.xz
  cd autoconf-2.69
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Automake
Source: https://ftp.gnu.org/gnu/automake/automake-1.16.2.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/automake/automake-1.16.2.tar.xz
  tar -xf automake-1.16.2.tar.xz
  cd automake-1.16.2
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure       \
      --prefix=/usr \
      --docdir=/usr/share/doc/automake-1.16.2
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Musl FTS
Source: https://github.com/pullmoll/musl-fts/archive/v1.2.7.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/pullmoll/musl-fts/archive/v1.2.7.tar.gz
  tar -xf v1.2.7.tar.gz
  cd musl-fts-1.2.7
#+END_SRC
Patch and configure:
#+BEGIN_SRC shell
  sed -i "/pkgconfig_DATA/i pkgconfigdir=/usr/lib/pkgconfig" Makefile.am
  ./bootstrap.sh

  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Musl Obstack
Source: https://github.com/pullmoll/musl-obstack/archive/v1.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/pullmoll/musl-obstack/archive/v1.1.tar.gz
  tar -xf v1.1.tar.gz
  cd musl-obstack-1.1
#+END_SRC
Patch and configure:
#+BEGIN_SRC shell
  sed -i "/pkgconfig_DATA/i pkgconfigdir=/usr/lib/pkgconfig" Makefile.am
  ./bootstrap.sh

  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Xz
Configure sources:
#+BEGIN_SRC shell
  ./configure          \
      --prefix=/usr    \
      --disable-static \
      --docdir=/usr/share/doc/xz-5.2.5
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  mv -v   /usr/bin/{lzma,unlzma,lzcat,xz,unxz,xzcat} /bin
  mv -v /usr/lib/liblzma.so.* /lib
  ln -svf ../../lib/$(readlink /usr/lib/liblzma.so) /usr/lib/liblzma.so
#+END_SRC
*** Kmod
Source: https://www.kernel.org/pub/linux/utils/kernel/kmod/kmod-27.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.kernel.org/pub/linux/utils/kernel/kmod/kmod-27.tar.xz
  tar -xf kmod-27.tar.xz
  cd kmod-27
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure                \
      --prefix=/usr          \
      --bindir=/bin          \
      --sysconfdir=/etc      \
      --with-rootlibdir=/lib \
      --with-xz              \
      --with-zlib
#+END_SRC
Build and install
#+BEGIN_SRC shell
  make && make install

  for target in depmod insmod lsmod modinfo modprobe rmmod; do
    ln -sfv ../bin/kmod /sbin/$target
  done

  ln -sfv kmod /bin/lsmod
#+END_SRC
*** Gettext
Build and install:
#+BEGIN_SRC shell
  make LIBINTL=MUSL
  make LIBINTL=MUSL prefix=/usr install
#+END_SRC
*** LibreSSL
Source: https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.2.0.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-3.2.0.tar.gz
  tar -xf libressl-3.2.0.tar.gz
  cd libressl-3.2.0
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure                 \
      --prefix=/usr           \
      --sysconfdir=/etc       \
      --mandir=/usr/share/man \
      --localstatedir=/var
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  install -Dm 755 /files/ssl.sh "/usr/etc/ssl"
#+END_SRC
*** Python
Source: https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://www.python.org/ftp/python/3.8.5/Python-3.8.5.tar.xz
  tar -xf Python-3.8.5.tar.xz
  cd Python-3.8.5
#+END_SRC
Patch sources:
#+BEGIN_SRC shell
  cat >> Modules/Setup <<EOF
  ,*disabled*
  _uuid nis ossaudiodev
  EOF

  rm -r Modules/expat
  rm -r Modules/_ctypes/{darwin,libffi}*

  for file in /patches/python/*; do
      patch -p1 < "$file"
  done
#+END_SRC
Set =CFLAGS= to improve performance:
#+BEGIN_SRC shell
  export CFLAGS="$CFLAGS -fno-semantic-interposition"
  export LDFLAGS="$LDFLAGS -fno-semantic-interposition"
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  ./configure               \
      --prefix=/usr         \
      --enable-shared       \
      --with-system-expat   \
      --with-system-ffi     \
      --with-ensurepip=yes  \
      --enable-ipv6         \
      --without-doc-strings \
      --with-threads
#+END_SRC
Build and install:
#+BEGIN_SRC shell
    make && make install

    ln -s python3 "/usr/bin/python"
    ln -s pip3    "/usr/bin/pip"
#+END_SRC
Make static library writable:
#+BEGIN_SRC shell
  chmod u+w "$1/usr/lib/libpython"*
#+END_SRC
Remove rarely used coponents:
#+BEGIN_SRC shell
  cd "/usr/lib/python"*
  rm -rf test ./*/test ./*/tests
  rm -rf pydoc* idlelib turtle* config-* ensurepip

  cd "/usr/bin"
  rm -f pydoc* idle*
#+END_SRC
Change permissions to allow stripping later
#+BEGIN_SRC shell
  chmod -v 755 /usr/lib/libpython3.8m.so
  chmod -v 755 /usr/lib/libpython3.so
#+END_SRC
*** Ninja (Samurai)
Source: https://github.com/michaelforney/samurai/releases/download/1.1/samurai-1.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/michaelforney/samurai/releases/download/1.1/samurai-1.1.tar.gz
  tar -xf samurai-1.1.tar.gz
  cd samurai-1.1
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make PREFIX=/usr
  make PREFIX=/usr install
  ln -s samu "$1/usr/bin/ninja"
#+END_SRC
*** Meson
Source: https://github.com/mesonbuild/meson/releases/download/0.55.1/meson-0.55.1.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/mesonbuild/meson/releases/download/0.55.1/meson-0.55.1.tar.gz
  tar -xf meson-0.55.1.tar.gz
  cd meson-0.55.1
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  python3 setup.py build

  python3 setup.py install --root=dest
  cp -rv dest/* /
#+END_SRC
*** Procps
Source: https://sourceforge.net/projects/procps-ng/files/Production/procps-ng-3.3.16.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://sourceforge.net/projects/procps-ng/files/Production/procps-ng-3.3.16.tar.xz
  tar -xf procps-ng-3.3.16.tar.xz
  cd procps-ng-3.3.16
#+END_SRC
Configure sources:
#+BEGIN_SRC shell
  autoreconf -fi
  ./configure                                  \
      --prefix=/usr                            \
      --exec-prefix=                           \
      --libdir=/usr/lib                        \
      --docdir=/usr/share/doc/procps-ng-3.3.16 \
      --disable-static                         \
      --disable-kill                           \
      --without-systemd                        \
      --disable-modern-top
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  mv -v /usr/lib/libprocps.so.* /lib
  ln -sfv ../../lib/$(readlink /usr/lib/libprocps.so) /usr/lib/libprocps.so
#+END_SRC
*** Busybox
Source: https://busybox.net/downloads/busybox-1.32.0.tar.bz2 \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://busybox.net/downloads/busybox-1.32.0.tar.bz2
  tar -xf busybox-1.32.0.tar.bz2
  cd busybox-1.32.0
#+END_SRC
Patch sources:
#+BEGIN_SRC shell
  for file in /patches/busybox/*; do
      patch -p1 < "$file"
  done
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make CC="cc" HOSTCC="cc"
  make CONFIG_PREFIX="/usr" install

  "/usr/bin/busybox" --list | while read -r bin; do
      ln -s busybox "/usr/bin/$bin"
  done
#+END_SRC
*** Check
Source: https://github.com/libcheck/check/releases/download/0.15.2/check-0.15.2.tar.gz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://github.com/libcheck/check/releases/download/0.15.2/check-0.15.2.tar.gz
  tar -xf check-0.15.2.tar.gz
  cd check-0.15.2
#+END_SRC
Configure:
#+BEGIN_SRC shell
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
Fix a script:
#+BEGIN_SRC shell
  sed -i '1 s/tools/usr/' /usr/bin/checkmk
#+END_SRC
*** Grub
Source: https://ftp.gnu.org/gnu/grub/grub-2.04.tar.xz \\
Download and extract the sources:
#+BEGIN_SRC shell
  wget https://ftp.gnu.org/gnu/grub/grub-2.04.tar.xz
  tar -xf grub-2.04.tar.xz
  cd grub-2.04
#+END_SRC
**** BIOS
Configure sources:
#+BEGIN_SRC shell
  ./configure                \
      --prefix=/usr          \
      --sbindir=/sbin        \
      --sysconfdir=/etc      \
      --disable-efiemu       \
      --disable-werror
#+END_SRC
**** UEFI
Configure sources:
#+BEGIN_SRC shell
  ./configure                \
      --prefix=/usr          \
      --target=x86_64        \
      --with-platform=efi    \
      --sbindir=/sbin        \
      --sysconfdir=/etc      \
      --disable-werror
#+END_SRC
**** Build
Build and install:
#+BEGIN_SRC shell
  make && make install
#+END_SRC
*** Gzip
Configure sources:
#+BEGIN_SRC shell
  DEFS=NO_ASM gl_cv_func_fflush_stdin=yes \
  ./configure --prefix=/usr
#+END_SRC
Build and install:
#+BEGIN_SRC shell
  make && make install
  mv -v /usr/bin/gzip /bin
#+END_SRC
*** Make
*** S6
